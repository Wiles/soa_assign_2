//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5456
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=2.0.50727.3038.
// 


/// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
[global::System.Serializable()]
[global::System.ComponentModel.DesignerCategoryAttribute("code")]
[global::System.ComponentModel.ToolboxItem(true)]
[global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
[global::System.Xml.Serialization.XmlRootAttribute("configuration")]
[global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
public partial class configuration : global::System.Data.DataSet {
    
    private _stringDataTable table_string;
    
    private servicesDataTable tableservices;
    
    private serviceDataTable tableservice;
    
    private nameDataTable tablename;
    
    private methodsDataTable tablemethods;
    
    private methodDataTable tablemethod;
    
    private requestDataTable tablerequest;
    
    private parametersDataTable tableparameters;
    
    private parameterDataTable tableparameter;
    
    private responseDataTable tableresponse;
    
    private DecipherAllResultDataTable tableDecipherAllResult;
    
    private CipherAllResultDataTable tableCipherAllResult;
    
    private tCurrencyDataTable tabletCurrency;
    
    private tCountryCodeAndNameDataTable tabletCountryCodeAndName;
    
    private tTeamInfoDataTable tabletTeamInfo;
    
    private StadiumNamesResultDataTable tableStadiumNamesResult;
    
    private tTopSelectedGoalScorerDataTable tabletTopSelectedGoalScorer;
    
    private CountriesDataTable tableCountries;
    
    private tCountrySelectedTopScorerDataTable tabletCountrySelectedTopScorer;
    
    private tPlayerNamesDataTable tabletPlayerNames;
    
    private global::System.Data.DataRelation relationDecipherAllResult_string;
    
    private global::System.Data.DataRelation relationCipherAllResult_string;
    
    private global::System.Data.DataRelation relationStadiumNamesResult_string;
    
    private global::System.Data.DataRelation relationservices_service;
    
    private global::System.Data.DataRelation relationservice_name;
    
    private global::System.Data.DataRelation relationservice_methods;
    
    private global::System.Data.DataRelation relationmethods_method;
    
    private global::System.Data.DataRelation relationmethod_request;
    
    private global::System.Data.DataRelation relationrequest_parameters;
    
    private global::System.Data.DataRelation relationparameters_parameter;
    
    private global::System.Data.DataRelation relationmethod_response;
    
    private global::System.Data.DataRelation relationresponse_DecipherAllResult;
    
    private global::System.Data.DataRelation relationresponse_CipherAllResult;
    
    private global::System.Data.DataRelation relationresponse_tCurrency;
    
    private global::System.Data.DataRelation relationresponse_tCountryCodeAndName;
    
    private global::System.Data.DataRelation relationresponse_tTeamInfo;
    
    private global::System.Data.DataRelation relationresponse_StadiumNamesResult;
    
    private global::System.Data.DataRelation relationresponse_tTopSelectedGoalScorer;
    
    private global::System.Data.DataRelation relationtTopSelectedGoalScorer_Countries;
    
    private global::System.Data.DataRelation relationCountries_tCountrySelectedTopScorer;
    
    private global::System.Data.DataRelation relationresponse_tPlayerNames;
    
    private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public configuration() {
        this.BeginInit();
        this.InitClass();
        global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += schemaChangedHandler;
        base.Relations.CollectionChanged += schemaChangedHandler;
        this.EndInit();
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected configuration(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
            base(info, context, false) {
        if ((this.IsBinarySerialized(info, context) == true)) {
            this.InitVars(false);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler1;
            this.Relations.CollectionChanged += schemaChangedHandler1;
            return;
        }
        string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
        if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
            global::System.Data.DataSet ds = new global::System.Data.DataSet();
            ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            if ((ds.Tables["string"] != null)) {
                base.Tables.Add(new _stringDataTable(ds.Tables["string"]));
            }
            if ((ds.Tables["services"] != null)) {
                base.Tables.Add(new servicesDataTable(ds.Tables["services"]));
            }
            if ((ds.Tables["service"] != null)) {
                base.Tables.Add(new serviceDataTable(ds.Tables["service"]));
            }
            if ((ds.Tables["name"] != null)) {
                base.Tables.Add(new nameDataTable(ds.Tables["name"]));
            }
            if ((ds.Tables["methods"] != null)) {
                base.Tables.Add(new methodsDataTable(ds.Tables["methods"]));
            }
            if ((ds.Tables["method"] != null)) {
                base.Tables.Add(new methodDataTable(ds.Tables["method"]));
            }
            if ((ds.Tables["request"] != null)) {
                base.Tables.Add(new requestDataTable(ds.Tables["request"]));
            }
            if ((ds.Tables["parameters"] != null)) {
                base.Tables.Add(new parametersDataTable(ds.Tables["parameters"]));
            }
            if ((ds.Tables["parameter"] != null)) {
                base.Tables.Add(new parameterDataTable(ds.Tables["parameter"]));
            }
            if ((ds.Tables["response"] != null)) {
                base.Tables.Add(new responseDataTable(ds.Tables["response"]));
            }
            if ((ds.Tables["DecipherAllResult"] != null)) {
                base.Tables.Add(new DecipherAllResultDataTable(ds.Tables["DecipherAllResult"]));
            }
            if ((ds.Tables["CipherAllResult"] != null)) {
                base.Tables.Add(new CipherAllResultDataTable(ds.Tables["CipherAllResult"]));
            }
            if ((ds.Tables["tCurrency"] != null)) {
                base.Tables.Add(new tCurrencyDataTable(ds.Tables["tCurrency"]));
            }
            if ((ds.Tables["tCountryCodeAndName"] != null)) {
                base.Tables.Add(new tCountryCodeAndNameDataTable(ds.Tables["tCountryCodeAndName"]));
            }
            if ((ds.Tables["tTeamInfo"] != null)) {
                base.Tables.Add(new tTeamInfoDataTable(ds.Tables["tTeamInfo"]));
            }
            if ((ds.Tables["StadiumNamesResult"] != null)) {
                base.Tables.Add(new StadiumNamesResultDataTable(ds.Tables["StadiumNamesResult"]));
            }
            if ((ds.Tables["tTopSelectedGoalScorer"] != null)) {
                base.Tables.Add(new tTopSelectedGoalScorerDataTable(ds.Tables["tTopSelectedGoalScorer"]));
            }
            if ((ds.Tables["Countries"] != null)) {
                base.Tables.Add(new CountriesDataTable(ds.Tables["Countries"]));
            }
            if ((ds.Tables["tCountrySelectedTopScorer"] != null)) {
                base.Tables.Add(new tCountrySelectedTopScorerDataTable(ds.Tables["tCountrySelectedTopScorer"]));
            }
            if ((ds.Tables["tPlayerNames"] != null)) {
                base.Tables.Add(new tPlayerNamesDataTable(ds.Tables["tPlayerNames"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        else {
            this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
        }
        this.GetSerializationData(info, context);
        global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        base.Tables.CollectionChanged += schemaChangedHandler;
        this.Relations.CollectionChanged += schemaChangedHandler;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public _stringDataTable _string {
        get {
            return this.table_string;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public servicesDataTable services {
        get {
            return this.tableservices;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public serviceDataTable service {
        get {
            return this.tableservice;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public nameDataTable name {
        get {
            return this.tablename;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public methodsDataTable methods {
        get {
            return this.tablemethods;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public methodDataTable method {
        get {
            return this.tablemethod;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public requestDataTable request {
        get {
            return this.tablerequest;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public parametersDataTable parameters {
        get {
            return this.tableparameters;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public parameterDataTable parameter {
        get {
            return this.tableparameter;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public responseDataTable response {
        get {
            return this.tableresponse;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public DecipherAllResultDataTable DecipherAllResult {
        get {
            return this.tableDecipherAllResult;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public CipherAllResultDataTable CipherAllResult {
        get {
            return this.tableCipherAllResult;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public tCurrencyDataTable tCurrency {
        get {
            return this.tabletCurrency;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public tCountryCodeAndNameDataTable tCountryCodeAndName {
        get {
            return this.tabletCountryCodeAndName;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public tTeamInfoDataTable tTeamInfo {
        get {
            return this.tabletTeamInfo;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public StadiumNamesResultDataTable StadiumNamesResult {
        get {
            return this.tableStadiumNamesResult;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public tTopSelectedGoalScorerDataTable tTopSelectedGoalScorer {
        get {
            return this.tabletTopSelectedGoalScorer;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public CountriesDataTable Countries {
        get {
            return this.tableCountries;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public tCountrySelectedTopScorerDataTable tCountrySelectedTopScorer {
        get {
            return this.tabletCountrySelectedTopScorer;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.Browsable(false)]
    [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
    public tPlayerNamesDataTable tPlayerNames {
        get {
            return this.tabletPlayerNames;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.BrowsableAttribute(true)]
    [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
    public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
        get {
            return this._schemaSerializationMode;
        }
        set {
            this._schemaSerializationMode = value;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public new global::System.Data.DataTableCollection Tables {
        get {
            return base.Tables;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
    public new global::System.Data.DataRelationCollection Relations {
        get {
            return base.Relations;
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override void InitializeDerivedDataSet() {
        this.BeginInit();
        this.InitClass();
        this.EndInit();
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public override global::System.Data.DataSet Clone() {
        configuration cln = ((configuration)(base.Clone()));
        cln.InitVars();
        cln.SchemaSerializationMode = this.SchemaSerializationMode;
        return cln;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override bool ShouldSerializeTables() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override bool ShouldSerializeRelations() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
        if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
            this.Reset();
            global::System.Data.DataSet ds = new global::System.Data.DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["string"] != null)) {
                base.Tables.Add(new _stringDataTable(ds.Tables["string"]));
            }
            if ((ds.Tables["services"] != null)) {
                base.Tables.Add(new servicesDataTable(ds.Tables["services"]));
            }
            if ((ds.Tables["service"] != null)) {
                base.Tables.Add(new serviceDataTable(ds.Tables["service"]));
            }
            if ((ds.Tables["name"] != null)) {
                base.Tables.Add(new nameDataTable(ds.Tables["name"]));
            }
            if ((ds.Tables["methods"] != null)) {
                base.Tables.Add(new methodsDataTable(ds.Tables["methods"]));
            }
            if ((ds.Tables["method"] != null)) {
                base.Tables.Add(new methodDataTable(ds.Tables["method"]));
            }
            if ((ds.Tables["request"] != null)) {
                base.Tables.Add(new requestDataTable(ds.Tables["request"]));
            }
            if ((ds.Tables["parameters"] != null)) {
                base.Tables.Add(new parametersDataTable(ds.Tables["parameters"]));
            }
            if ((ds.Tables["parameter"] != null)) {
                base.Tables.Add(new parameterDataTable(ds.Tables["parameter"]));
            }
            if ((ds.Tables["response"] != null)) {
                base.Tables.Add(new responseDataTable(ds.Tables["response"]));
            }
            if ((ds.Tables["DecipherAllResult"] != null)) {
                base.Tables.Add(new DecipherAllResultDataTable(ds.Tables["DecipherAllResult"]));
            }
            if ((ds.Tables["CipherAllResult"] != null)) {
                base.Tables.Add(new CipherAllResultDataTable(ds.Tables["CipherAllResult"]));
            }
            if ((ds.Tables["tCurrency"] != null)) {
                base.Tables.Add(new tCurrencyDataTable(ds.Tables["tCurrency"]));
            }
            if ((ds.Tables["tCountryCodeAndName"] != null)) {
                base.Tables.Add(new tCountryCodeAndNameDataTable(ds.Tables["tCountryCodeAndName"]));
            }
            if ((ds.Tables["tTeamInfo"] != null)) {
                base.Tables.Add(new tTeamInfoDataTable(ds.Tables["tTeamInfo"]));
            }
            if ((ds.Tables["StadiumNamesResult"] != null)) {
                base.Tables.Add(new StadiumNamesResultDataTable(ds.Tables["StadiumNamesResult"]));
            }
            if ((ds.Tables["tTopSelectedGoalScorer"] != null)) {
                base.Tables.Add(new tTopSelectedGoalScorerDataTable(ds.Tables["tTopSelectedGoalScorer"]));
            }
            if ((ds.Tables["Countries"] != null)) {
                base.Tables.Add(new CountriesDataTable(ds.Tables["Countries"]));
            }
            if ((ds.Tables["tCountrySelectedTopScorer"] != null)) {
                base.Tables.Add(new tCountrySelectedTopScorerDataTable(ds.Tables["tCountrySelectedTopScorer"]));
            }
            if ((ds.Tables["tPlayerNames"] != null)) {
                base.Tables.Add(new tPlayerNamesDataTable(ds.Tables["tPlayerNames"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        else {
            this.ReadXml(reader);
            this.InitVars();
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
        global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
        this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
        stream.Position = 0;
        return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal void InitVars() {
        this.InitVars(true);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal void InitVars(bool initTable) {
        this.table_string = ((_stringDataTable)(base.Tables["string"]));
        if ((initTable == true)) {
            if ((this.table_string != null)) {
                this.table_string.InitVars();
            }
        }
        this.tableservices = ((servicesDataTable)(base.Tables["services"]));
        if ((initTable == true)) {
            if ((this.tableservices != null)) {
                this.tableservices.InitVars();
            }
        }
        this.tableservice = ((serviceDataTable)(base.Tables["service"]));
        if ((initTable == true)) {
            if ((this.tableservice != null)) {
                this.tableservice.InitVars();
            }
        }
        this.tablename = ((nameDataTable)(base.Tables["name"]));
        if ((initTable == true)) {
            if ((this.tablename != null)) {
                this.tablename.InitVars();
            }
        }
        this.tablemethods = ((methodsDataTable)(base.Tables["methods"]));
        if ((initTable == true)) {
            if ((this.tablemethods != null)) {
                this.tablemethods.InitVars();
            }
        }
        this.tablemethod = ((methodDataTable)(base.Tables["method"]));
        if ((initTable == true)) {
            if ((this.tablemethod != null)) {
                this.tablemethod.InitVars();
            }
        }
        this.tablerequest = ((requestDataTable)(base.Tables["request"]));
        if ((initTable == true)) {
            if ((this.tablerequest != null)) {
                this.tablerequest.InitVars();
            }
        }
        this.tableparameters = ((parametersDataTable)(base.Tables["parameters"]));
        if ((initTable == true)) {
            if ((this.tableparameters != null)) {
                this.tableparameters.InitVars();
            }
        }
        this.tableparameter = ((parameterDataTable)(base.Tables["parameter"]));
        if ((initTable == true)) {
            if ((this.tableparameter != null)) {
                this.tableparameter.InitVars();
            }
        }
        this.tableresponse = ((responseDataTable)(base.Tables["response"]));
        if ((initTable == true)) {
            if ((this.tableresponse != null)) {
                this.tableresponse.InitVars();
            }
        }
        this.tableDecipherAllResult = ((DecipherAllResultDataTable)(base.Tables["DecipherAllResult"]));
        if ((initTable == true)) {
            if ((this.tableDecipherAllResult != null)) {
                this.tableDecipherAllResult.InitVars();
            }
        }
        this.tableCipherAllResult = ((CipherAllResultDataTable)(base.Tables["CipherAllResult"]));
        if ((initTable == true)) {
            if ((this.tableCipherAllResult != null)) {
                this.tableCipherAllResult.InitVars();
            }
        }
        this.tabletCurrency = ((tCurrencyDataTable)(base.Tables["tCurrency"]));
        if ((initTable == true)) {
            if ((this.tabletCurrency != null)) {
                this.tabletCurrency.InitVars();
            }
        }
        this.tabletCountryCodeAndName = ((tCountryCodeAndNameDataTable)(base.Tables["tCountryCodeAndName"]));
        if ((initTable == true)) {
            if ((this.tabletCountryCodeAndName != null)) {
                this.tabletCountryCodeAndName.InitVars();
            }
        }
        this.tabletTeamInfo = ((tTeamInfoDataTable)(base.Tables["tTeamInfo"]));
        if ((initTable == true)) {
            if ((this.tabletTeamInfo != null)) {
                this.tabletTeamInfo.InitVars();
            }
        }
        this.tableStadiumNamesResult = ((StadiumNamesResultDataTable)(base.Tables["StadiumNamesResult"]));
        if ((initTable == true)) {
            if ((this.tableStadiumNamesResult != null)) {
                this.tableStadiumNamesResult.InitVars();
            }
        }
        this.tabletTopSelectedGoalScorer = ((tTopSelectedGoalScorerDataTable)(base.Tables["tTopSelectedGoalScorer"]));
        if ((initTable == true)) {
            if ((this.tabletTopSelectedGoalScorer != null)) {
                this.tabletTopSelectedGoalScorer.InitVars();
            }
        }
        this.tableCountries = ((CountriesDataTable)(base.Tables["Countries"]));
        if ((initTable == true)) {
            if ((this.tableCountries != null)) {
                this.tableCountries.InitVars();
            }
        }
        this.tabletCountrySelectedTopScorer = ((tCountrySelectedTopScorerDataTable)(base.Tables["tCountrySelectedTopScorer"]));
        if ((initTable == true)) {
            if ((this.tabletCountrySelectedTopScorer != null)) {
                this.tabletCountrySelectedTopScorer.InitVars();
            }
        }
        this.tabletPlayerNames = ((tPlayerNamesDataTable)(base.Tables["tPlayerNames"]));
        if ((initTable == true)) {
            if ((this.tabletPlayerNames != null)) {
                this.tabletPlayerNames.InitVars();
            }
        }
        this.relationDecipherAllResult_string = this.Relations["DecipherAllResult_string"];
        this.relationCipherAllResult_string = this.Relations["CipherAllResult_string"];
        this.relationStadiumNamesResult_string = this.Relations["StadiumNamesResult_string"];
        this.relationservices_service = this.Relations["services_service"];
        this.relationservice_name = this.Relations["service_name"];
        this.relationservice_methods = this.Relations["service_methods"];
        this.relationmethods_method = this.Relations["methods_method"];
        this.relationmethod_request = this.Relations["method_request"];
        this.relationrequest_parameters = this.Relations["request_parameters"];
        this.relationparameters_parameter = this.Relations["parameters_parameter"];
        this.relationmethod_response = this.Relations["method_response"];
        this.relationresponse_DecipherAllResult = this.Relations["response_DecipherAllResult"];
        this.relationresponse_CipherAllResult = this.Relations["response_CipherAllResult"];
        this.relationresponse_tCurrency = this.Relations["response_tCurrency"];
        this.relationresponse_tCountryCodeAndName = this.Relations["response_tCountryCodeAndName"];
        this.relationresponse_tTeamInfo = this.Relations["response_tTeamInfo"];
        this.relationresponse_StadiumNamesResult = this.Relations["response_StadiumNamesResult"];
        this.relationresponse_tTopSelectedGoalScorer = this.Relations["response_tTopSelectedGoalScorer"];
        this.relationtTopSelectedGoalScorer_Countries = this.Relations["tTopSelectedGoalScorer_Countries"];
        this.relationCountries_tCountrySelectedTopScorer = this.Relations["Countries_tCountrySelectedTopScorer"];
        this.relationresponse_tPlayerNames = this.Relations["response_tPlayerNames"];
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private void InitClass() {
        this.DataSetName = "configuration";
        this.Prefix = "";
        this.Locale = new global::System.Globalization.CultureInfo("en-US");
        this.EnforceConstraints = true;
        this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        this.table_string = new _stringDataTable();
        base.Tables.Add(this.table_string);
        this.tableservices = new servicesDataTable();
        base.Tables.Add(this.tableservices);
        this.tableservice = new serviceDataTable();
        base.Tables.Add(this.tableservice);
        this.tablename = new nameDataTable();
        base.Tables.Add(this.tablename);
        this.tablemethods = new methodsDataTable();
        base.Tables.Add(this.tablemethods);
        this.tablemethod = new methodDataTable();
        base.Tables.Add(this.tablemethod);
        this.tablerequest = new requestDataTable();
        base.Tables.Add(this.tablerequest);
        this.tableparameters = new parametersDataTable();
        base.Tables.Add(this.tableparameters);
        this.tableparameter = new parameterDataTable();
        base.Tables.Add(this.tableparameter);
        this.tableresponse = new responseDataTable();
        base.Tables.Add(this.tableresponse);
        this.tableDecipherAllResult = new DecipherAllResultDataTable();
        base.Tables.Add(this.tableDecipherAllResult);
        this.tableCipherAllResult = new CipherAllResultDataTable();
        base.Tables.Add(this.tableCipherAllResult);
        this.tabletCurrency = new tCurrencyDataTable();
        base.Tables.Add(this.tabletCurrency);
        this.tabletCountryCodeAndName = new tCountryCodeAndNameDataTable();
        base.Tables.Add(this.tabletCountryCodeAndName);
        this.tabletTeamInfo = new tTeamInfoDataTable();
        base.Tables.Add(this.tabletTeamInfo);
        this.tableStadiumNamesResult = new StadiumNamesResultDataTable();
        base.Tables.Add(this.tableStadiumNamesResult);
        this.tabletTopSelectedGoalScorer = new tTopSelectedGoalScorerDataTable();
        base.Tables.Add(this.tabletTopSelectedGoalScorer);
        this.tableCountries = new CountriesDataTable();
        base.Tables.Add(this.tableCountries);
        this.tabletCountrySelectedTopScorer = new tCountrySelectedTopScorerDataTable();
        base.Tables.Add(this.tabletCountrySelectedTopScorer);
        this.tabletPlayerNames = new tPlayerNamesDataTable();
        base.Tables.Add(this.tabletPlayerNames);
        global::System.Data.ForeignKeyConstraint fkc;
        fkc = new global::System.Data.ForeignKeyConstraint("DecipherAllResult_string", new global::System.Data.DataColumn[] {
                    this.tableDecipherAllResult.DecipherAllResult_IdColumn}, new global::System.Data.DataColumn[] {
                    this.table_string.DecipherAllResult_IdColumn});
        this.table_string.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("CipherAllResult_string", new global::System.Data.DataColumn[] {
                    this.tableCipherAllResult.CipherAllResult_IdColumn}, new global::System.Data.DataColumn[] {
                    this.table_string.CipherAllResult_IdColumn});
        this.table_string.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("StadiumNamesResult_string", new global::System.Data.DataColumn[] {
                    this.tableStadiumNamesResult.StadiumNamesResult_IdColumn}, new global::System.Data.DataColumn[] {
                    this.table_string.StadiumNamesResult_IdColumn});
        this.table_string.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("services_service", new global::System.Data.DataColumn[] {
                    this.tableservices.services_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableservice.services_IdColumn});
        this.tableservice.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("service_name", new global::System.Data.DataColumn[] {
                    this.tableservice.service_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablename.service_IdColumn});
        this.tablename.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("service_methods", new global::System.Data.DataColumn[] {
                    this.tableservice.service_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablemethods.service_IdColumn});
        this.tablemethods.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("methods_method", new global::System.Data.DataColumn[] {
                    this.tablemethods.methods_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablemethod.methods_IdColumn});
        this.tablemethod.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("method_request", new global::System.Data.DataColumn[] {
                    this.tablemethod.method_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablerequest.method_IdColumn});
        this.tablerequest.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("request_parameters", new global::System.Data.DataColumn[] {
                    this.tablerequest.request_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableparameters.request_IdColumn});
        this.tableparameters.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("parameters_parameter", new global::System.Data.DataColumn[] {
                    this.tableparameters.parameters_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableparameter.parameters_IdColumn});
        this.tableparameter.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("method_response", new global::System.Data.DataColumn[] {
                    this.tablemethod.method_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableresponse.method_IdColumn});
        this.tableresponse.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("response_DecipherAllResult", new global::System.Data.DataColumn[] {
                    this.tableresponse.response_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableDecipherAllResult.response_IdColumn});
        this.tableDecipherAllResult.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("response_CipherAllResult", new global::System.Data.DataColumn[] {
                    this.tableresponse.response_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableCipherAllResult.response_IdColumn});
        this.tableCipherAllResult.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("response_tCurrency", new global::System.Data.DataColumn[] {
                    this.tableresponse.response_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tabletCurrency.response_IdColumn});
        this.tabletCurrency.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("response_tCountryCodeAndName", new global::System.Data.DataColumn[] {
                    this.tableresponse.response_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tabletCountryCodeAndName.response_IdColumn});
        this.tabletCountryCodeAndName.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("response_tTeamInfo", new global::System.Data.DataColumn[] {
                    this.tableresponse.response_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tabletTeamInfo.response_IdColumn});
        this.tabletTeamInfo.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("response_StadiumNamesResult", new global::System.Data.DataColumn[] {
                    this.tableresponse.response_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableStadiumNamesResult.response_IdColumn});
        this.tableStadiumNamesResult.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("response_tTopSelectedGoalScorer", new global::System.Data.DataColumn[] {
                    this.tableresponse.response_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tabletTopSelectedGoalScorer.response_IdColumn});
        this.tabletTopSelectedGoalScorer.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("tTopSelectedGoalScorer_Countries", new global::System.Data.DataColumn[] {
                    this.tabletTopSelectedGoalScorer.tTopSelectedGoalScorer_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableCountries.tTopSelectedGoalScorer_IdColumn});
        this.tableCountries.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("Countries_tCountrySelectedTopScorer", new global::System.Data.DataColumn[] {
                    this.tableCountries.Countries_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tabletCountrySelectedTopScorer.Countries_IdColumn});
        this.tabletCountrySelectedTopScorer.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        fkc = new global::System.Data.ForeignKeyConstraint("response_tPlayerNames", new global::System.Data.DataColumn[] {
                    this.tableresponse.response_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tabletPlayerNames.response_IdColumn});
        this.tabletPlayerNames.Constraints.Add(fkc);
        fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
        fkc.DeleteRule = global::System.Data.Rule.Cascade;
        fkc.UpdateRule = global::System.Data.Rule.Cascade;
        this.relationDecipherAllResult_string = new global::System.Data.DataRelation("DecipherAllResult_string", new global::System.Data.DataColumn[] {
                    this.tableDecipherAllResult.DecipherAllResult_IdColumn}, new global::System.Data.DataColumn[] {
                    this.table_string.DecipherAllResult_IdColumn}, false);
        this.relationDecipherAllResult_string.Nested = true;
        this.Relations.Add(this.relationDecipherAllResult_string);
        this.relationCipherAllResult_string = new global::System.Data.DataRelation("CipherAllResult_string", new global::System.Data.DataColumn[] {
                    this.tableCipherAllResult.CipherAllResult_IdColumn}, new global::System.Data.DataColumn[] {
                    this.table_string.CipherAllResult_IdColumn}, false);
        this.relationCipherAllResult_string.Nested = true;
        this.Relations.Add(this.relationCipherAllResult_string);
        this.relationStadiumNamesResult_string = new global::System.Data.DataRelation("StadiumNamesResult_string", new global::System.Data.DataColumn[] {
                    this.tableStadiumNamesResult.StadiumNamesResult_IdColumn}, new global::System.Data.DataColumn[] {
                    this.table_string.StadiumNamesResult_IdColumn}, false);
        this.relationStadiumNamesResult_string.Nested = true;
        this.Relations.Add(this.relationStadiumNamesResult_string);
        this.relationservices_service = new global::System.Data.DataRelation("services_service", new global::System.Data.DataColumn[] {
                    this.tableservices.services_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableservice.services_IdColumn}, false);
        this.relationservices_service.Nested = true;
        this.Relations.Add(this.relationservices_service);
        this.relationservice_name = new global::System.Data.DataRelation("service_name", new global::System.Data.DataColumn[] {
                    this.tableservice.service_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablename.service_IdColumn}, false);
        this.relationservice_name.Nested = true;
        this.Relations.Add(this.relationservice_name);
        this.relationservice_methods = new global::System.Data.DataRelation("service_methods", new global::System.Data.DataColumn[] {
                    this.tableservice.service_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablemethods.service_IdColumn}, false);
        this.relationservice_methods.Nested = true;
        this.Relations.Add(this.relationservice_methods);
        this.relationmethods_method = new global::System.Data.DataRelation("methods_method", new global::System.Data.DataColumn[] {
                    this.tablemethods.methods_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablemethod.methods_IdColumn}, false);
        this.relationmethods_method.Nested = true;
        this.Relations.Add(this.relationmethods_method);
        this.relationmethod_request = new global::System.Data.DataRelation("method_request", new global::System.Data.DataColumn[] {
                    this.tablemethod.method_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tablerequest.method_IdColumn}, false);
        this.relationmethod_request.Nested = true;
        this.Relations.Add(this.relationmethod_request);
        this.relationrequest_parameters = new global::System.Data.DataRelation("request_parameters", new global::System.Data.DataColumn[] {
                    this.tablerequest.request_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableparameters.request_IdColumn}, false);
        this.relationrequest_parameters.Nested = true;
        this.Relations.Add(this.relationrequest_parameters);
        this.relationparameters_parameter = new global::System.Data.DataRelation("parameters_parameter", new global::System.Data.DataColumn[] {
                    this.tableparameters.parameters_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableparameter.parameters_IdColumn}, false);
        this.relationparameters_parameter.Nested = true;
        this.Relations.Add(this.relationparameters_parameter);
        this.relationmethod_response = new global::System.Data.DataRelation("method_response", new global::System.Data.DataColumn[] {
                    this.tablemethod.method_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableresponse.method_IdColumn}, false);
        this.relationmethod_response.Nested = true;
        this.Relations.Add(this.relationmethod_response);
        this.relationresponse_DecipherAllResult = new global::System.Data.DataRelation("response_DecipherAllResult", new global::System.Data.DataColumn[] {
                    this.tableresponse.response_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableDecipherAllResult.response_IdColumn}, false);
        this.relationresponse_DecipherAllResult.Nested = true;
        this.Relations.Add(this.relationresponse_DecipherAllResult);
        this.relationresponse_CipherAllResult = new global::System.Data.DataRelation("response_CipherAllResult", new global::System.Data.DataColumn[] {
                    this.tableresponse.response_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableCipherAllResult.response_IdColumn}, false);
        this.relationresponse_CipherAllResult.Nested = true;
        this.Relations.Add(this.relationresponse_CipherAllResult);
        this.relationresponse_tCurrency = new global::System.Data.DataRelation("response_tCurrency", new global::System.Data.DataColumn[] {
                    this.tableresponse.response_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tabletCurrency.response_IdColumn}, false);
        this.relationresponse_tCurrency.Nested = true;
        this.Relations.Add(this.relationresponse_tCurrency);
        this.relationresponse_tCountryCodeAndName = new global::System.Data.DataRelation("response_tCountryCodeAndName", new global::System.Data.DataColumn[] {
                    this.tableresponse.response_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tabletCountryCodeAndName.response_IdColumn}, false);
        this.relationresponse_tCountryCodeAndName.Nested = true;
        this.Relations.Add(this.relationresponse_tCountryCodeAndName);
        this.relationresponse_tTeamInfo = new global::System.Data.DataRelation("response_tTeamInfo", new global::System.Data.DataColumn[] {
                    this.tableresponse.response_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tabletTeamInfo.response_IdColumn}, false);
        this.relationresponse_tTeamInfo.Nested = true;
        this.Relations.Add(this.relationresponse_tTeamInfo);
        this.relationresponse_StadiumNamesResult = new global::System.Data.DataRelation("response_StadiumNamesResult", new global::System.Data.DataColumn[] {
                    this.tableresponse.response_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableStadiumNamesResult.response_IdColumn}, false);
        this.relationresponse_StadiumNamesResult.Nested = true;
        this.Relations.Add(this.relationresponse_StadiumNamesResult);
        this.relationresponse_tTopSelectedGoalScorer = new global::System.Data.DataRelation("response_tTopSelectedGoalScorer", new global::System.Data.DataColumn[] {
                    this.tableresponse.response_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tabletTopSelectedGoalScorer.response_IdColumn}, false);
        this.relationresponse_tTopSelectedGoalScorer.Nested = true;
        this.Relations.Add(this.relationresponse_tTopSelectedGoalScorer);
        this.relationtTopSelectedGoalScorer_Countries = new global::System.Data.DataRelation("tTopSelectedGoalScorer_Countries", new global::System.Data.DataColumn[] {
                    this.tabletTopSelectedGoalScorer.tTopSelectedGoalScorer_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tableCountries.tTopSelectedGoalScorer_IdColumn}, false);
        this.relationtTopSelectedGoalScorer_Countries.Nested = true;
        this.Relations.Add(this.relationtTopSelectedGoalScorer_Countries);
        this.relationCountries_tCountrySelectedTopScorer = new global::System.Data.DataRelation("Countries_tCountrySelectedTopScorer", new global::System.Data.DataColumn[] {
                    this.tableCountries.Countries_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tabletCountrySelectedTopScorer.Countries_IdColumn}, false);
        this.relationCountries_tCountrySelectedTopScorer.Nested = true;
        this.Relations.Add(this.relationCountries_tCountrySelectedTopScorer);
        this.relationresponse_tPlayerNames = new global::System.Data.DataRelation("response_tPlayerNames", new global::System.Data.DataColumn[] {
                    this.tableresponse.response_IdColumn}, new global::System.Data.DataColumn[] {
                    this.tabletPlayerNames.response_IdColumn}, false);
        this.relationresponse_tPlayerNames.Nested = true;
        this.Relations.Add(this.relationresponse_tPlayerNames);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerialize_string() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeservices() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeservice() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializename() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializemethods() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializemethod() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializerequest() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeparameters() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeparameter() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeresponse() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeDecipherAllResult() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeCipherAllResult() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializetCurrency() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializetCountryCodeAndName() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializetTeamInfo() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeStadiumNamesResult() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializetTopSelectedGoalScorer() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializeCountries() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializetCountrySelectedTopScorer() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private bool ShouldSerializetPlayerNames() {
        return false;
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
        if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
            this.InitVars();
        }
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
        configuration ds = new configuration();
        global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
        global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
        global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
        any.Namespace = ds.Namespace;
        sequence.Items.Add(any);
        type.Particle = sequence;
        global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
        if (xs.Contains(dsSchema.TargetNamespace)) {
            global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
            global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
            try {
                global::System.Xml.Schema.XmlSchema schema = null;
                dsSchema.Write(s1);
                for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                    schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                    s2.SetLength(0);
                    schema.Write(s2);
                    if ((s1.Length == s2.Length)) {
                        s1.Position = 0;
                        s2.Position = 0;
                        for (; ((s1.Position != s1.Length) 
                                    && (s1.ReadByte() == s2.ReadByte())); ) {
                            ;
                        }
                        if ((s1.Position == s1.Length)) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if ((s1 != null)) {
                    s1.Close();
                }
                if ((s2 != null)) {
                    s2.Close();
                }
            }
        }
        xs.Add(dsSchema);
        return type;
    }
    
    public delegate void _stringRowChangeEventHandler(object sender, _stringRowChangeEvent e);
    
    public delegate void servicesRowChangeEventHandler(object sender, servicesRowChangeEvent e);
    
    public delegate void serviceRowChangeEventHandler(object sender, serviceRowChangeEvent e);
    
    public delegate void nameRowChangeEventHandler(object sender, nameRowChangeEvent e);
    
    public delegate void methodsRowChangeEventHandler(object sender, methodsRowChangeEvent e);
    
    public delegate void methodRowChangeEventHandler(object sender, methodRowChangeEvent e);
    
    public delegate void requestRowChangeEventHandler(object sender, requestRowChangeEvent e);
    
    public delegate void parametersRowChangeEventHandler(object sender, parametersRowChangeEvent e);
    
    public delegate void parameterRowChangeEventHandler(object sender, parameterRowChangeEvent e);
    
    public delegate void responseRowChangeEventHandler(object sender, responseRowChangeEvent e);
    
    public delegate void DecipherAllResultRowChangeEventHandler(object sender, DecipherAllResultRowChangeEvent e);
    
    public delegate void CipherAllResultRowChangeEventHandler(object sender, CipherAllResultRowChangeEvent e);
    
    public delegate void tCurrencyRowChangeEventHandler(object sender, tCurrencyRowChangeEvent e);
    
    public delegate void tCountryCodeAndNameRowChangeEventHandler(object sender, tCountryCodeAndNameRowChangeEvent e);
    
    public delegate void tTeamInfoRowChangeEventHandler(object sender, tTeamInfoRowChangeEvent e);
    
    public delegate void StadiumNamesResultRowChangeEventHandler(object sender, StadiumNamesResultRowChangeEvent e);
    
    public delegate void tTopSelectedGoalScorerRowChangeEventHandler(object sender, tTopSelectedGoalScorerRowChangeEvent e);
    
    public delegate void CountriesRowChangeEventHandler(object sender, CountriesRowChangeEvent e);
    
    public delegate void tCountrySelectedTopScorerRowChangeEventHandler(object sender, tCountrySelectedTopScorerRowChangeEvent e);
    
    public delegate void tPlayerNamesRowChangeEventHandler(object sender, tPlayerNamesRowChangeEvent e);
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class _stringDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnDecipherAllResult_Id;
        
        private global::System.Data.DataColumn columnCipherAllResult_Id;
        
        private global::System.Data.DataColumn columnStadiumNamesResult_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public _stringDataTable() {
            this.TableName = "string";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal _stringDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected _stringDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn DecipherAllResult_IdColumn {
            get {
                return this.columnDecipherAllResult_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn CipherAllResult_IdColumn {
            get {
                return this.columnCipherAllResult_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn StadiumNamesResult_IdColumn {
            get {
                return this.columnStadiumNamesResult_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public _stringRow this[int index] {
            get {
                return ((_stringRow)(this.Rows[index]));
            }
        }
        
        public event _stringRowChangeEventHandler _stringRowChanging;
        
        public event _stringRowChangeEventHandler _stringRowChanged;
        
        public event _stringRowChangeEventHandler _stringRowDeleting;
        
        public event _stringRowChangeEventHandler _stringRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Add_stringRow(_stringRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public _stringRow Add_stringRow(DecipherAllResultRow parentDecipherAllResultRowByDecipherAllResult_string, CipherAllResultRow parentCipherAllResultRowByCipherAllResult_string, StadiumNamesResultRow parentStadiumNamesResultRowByStadiumNamesResult_string) {
            _stringRow row_stringRow = ((_stringRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    null,
                    null,
                    null};
            if ((parentDecipherAllResultRowByDecipherAllResult_string != null)) {
                columnValuesArray[0] = parentDecipherAllResultRowByDecipherAllResult_string[0];
            }
            if ((parentCipherAllResultRowByCipherAllResult_string != null)) {
                columnValuesArray[1] = parentCipherAllResultRowByCipherAllResult_string[0];
            }
            if ((parentStadiumNamesResultRowByStadiumNamesResult_string != null)) {
                columnValuesArray[2] = parentStadiumNamesResultRowByStadiumNamesResult_string[0];
            }
            row_stringRow.ItemArray = columnValuesArray;
            this.Rows.Add(row_stringRow);
            return row_stringRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            _stringDataTable cln = ((_stringDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new _stringDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnDecipherAllResult_Id = base.Columns["DecipherAllResult_Id"];
            this.columnCipherAllResult_Id = base.Columns["CipherAllResult_Id"];
            this.columnStadiumNamesResult_Id = base.Columns["StadiumNamesResult_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnDecipherAllResult_Id = new global::System.Data.DataColumn("DecipherAllResult_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnDecipherAllResult_Id);
            this.columnCipherAllResult_Id = new global::System.Data.DataColumn("CipherAllResult_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnCipherAllResult_Id);
            this.columnStadiumNamesResult_Id = new global::System.Data.DataColumn("StadiumNamesResult_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnStadiumNamesResult_Id);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public _stringRow New_stringRow() {
            return ((_stringRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new _stringRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(_stringRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this._stringRowChanged != null)) {
                this._stringRowChanged(this, new _stringRowChangeEvent(((_stringRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this._stringRowChanging != null)) {
                this._stringRowChanging(this, new _stringRowChangeEvent(((_stringRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this._stringRowDeleted != null)) {
                this._stringRowDeleted(this, new _stringRowChangeEvent(((_stringRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this._stringRowDeleting != null)) {
                this._stringRowDeleting(this, new _stringRowChangeEvent(((_stringRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Remove_stringRow(_stringRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            configuration ds = new configuration();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "_stringDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class servicesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnservices_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public servicesDataTable() {
            this.TableName = "services";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal servicesDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected servicesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn services_IdColumn {
            get {
                return this.columnservices_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public servicesRow this[int index] {
            get {
                return ((servicesRow)(this.Rows[index]));
            }
        }
        
        public event servicesRowChangeEventHandler servicesRowChanging;
        
        public event servicesRowChangeEventHandler servicesRowChanged;
        
        public event servicesRowChangeEventHandler servicesRowDeleting;
        
        public event servicesRowChangeEventHandler servicesRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddservicesRow(servicesRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public servicesRow AddservicesRow() {
            servicesRow rowservicesRow = ((servicesRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    null};
            rowservicesRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowservicesRow);
            return rowservicesRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            servicesDataTable cln = ((servicesDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new servicesDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnservices_Id = base.Columns["services_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnservices_Id = new global::System.Data.DataColumn("services_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnservices_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnservices_Id}, true));
            this.columnservices_Id.AutoIncrement = true;
            this.columnservices_Id.AllowDBNull = false;
            this.columnservices_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public servicesRow NewservicesRow() {
            return ((servicesRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new servicesRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(servicesRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.servicesRowChanged != null)) {
                this.servicesRowChanged(this, new servicesRowChangeEvent(((servicesRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.servicesRowChanging != null)) {
                this.servicesRowChanging(this, new servicesRowChangeEvent(((servicesRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.servicesRowDeleted != null)) {
                this.servicesRowDeleted(this, new servicesRowChangeEvent(((servicesRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.servicesRowDeleting != null)) {
                this.servicesRowDeleting(this, new servicesRowChangeEvent(((servicesRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveservicesRow(servicesRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            configuration ds = new configuration();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "servicesDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class serviceDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnserviceID;
        
        private global::System.Data.DataColumn columnservice_URL;
        
        private global::System.Data.DataColumn columninfo_URL;
        
        private global::System.Data.DataColumn columnwsdl_URL;
        
        private global::System.Data.DataColumn columnxmlns_tns;
        
        private global::System.Data.DataColumn columnservice_description;
        
        private global::System.Data.DataColumn columnservice_Id;
        
        private global::System.Data.DataColumn columnservices_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public serviceDataTable() {
            this.TableName = "service";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal serviceDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected serviceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn serviceIDColumn {
            get {
                return this.columnserviceID;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn service_URLColumn {
            get {
                return this.columnservice_URL;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn info_URLColumn {
            get {
                return this.columninfo_URL;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn wsdl_URLColumn {
            get {
                return this.columnwsdl_URL;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn xmlns_tnsColumn {
            get {
                return this.columnxmlns_tns;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn service_descriptionColumn {
            get {
                return this.columnservice_description;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn service_IdColumn {
            get {
                return this.columnservice_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn services_IdColumn {
            get {
                return this.columnservices_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public serviceRow this[int index] {
            get {
                return ((serviceRow)(this.Rows[index]));
            }
        }
        
        public event serviceRowChangeEventHandler serviceRowChanging;
        
        public event serviceRowChangeEventHandler serviceRowChanged;
        
        public event serviceRowChangeEventHandler serviceRowDeleting;
        
        public event serviceRowChangeEventHandler serviceRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddserviceRow(serviceRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public serviceRow AddserviceRow(string serviceID, string service_URL, string info_URL, string wsdl_URL, string xmlns_tns, string service_description, servicesRow parentservicesRowByservices_service) {
            serviceRow rowserviceRow = ((serviceRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    serviceID,
                    service_URL,
                    info_URL,
                    wsdl_URL,
                    xmlns_tns,
                    service_description,
                    null,
                    null};
            if ((parentservicesRowByservices_service != null)) {
                columnValuesArray[7] = parentservicesRowByservices_service[0];
            }
            rowserviceRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowserviceRow);
            return rowserviceRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            serviceDataTable cln = ((serviceDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new serviceDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnserviceID = base.Columns["serviceID"];
            this.columnservice_URL = base.Columns["service_URL"];
            this.columninfo_URL = base.Columns["info_URL"];
            this.columnwsdl_URL = base.Columns["wsdl_URL"];
            this.columnxmlns_tns = base.Columns["xmlns_tns"];
            this.columnservice_description = base.Columns["service_description"];
            this.columnservice_Id = base.Columns["service_Id"];
            this.columnservices_Id = base.Columns["services_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnserviceID = new global::System.Data.DataColumn("serviceID", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnserviceID);
            this.columnservice_URL = new global::System.Data.DataColumn("service_URL", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnservice_URL);
            this.columninfo_URL = new global::System.Data.DataColumn("info_URL", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columninfo_URL);
            this.columnwsdl_URL = new global::System.Data.DataColumn("wsdl_URL", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnwsdl_URL);
            this.columnxmlns_tns = new global::System.Data.DataColumn("xmlns_tns", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnxmlns_tns);
            this.columnservice_description = new global::System.Data.DataColumn("service_description", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnservice_description);
            this.columnservice_Id = new global::System.Data.DataColumn("service_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnservice_Id);
            this.columnservices_Id = new global::System.Data.DataColumn("services_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnservices_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnservice_Id}, true));
            this.columnserviceID.Namespace = "";
            this.columnservice_Id.AutoIncrement = true;
            this.columnservice_Id.AllowDBNull = false;
            this.columnservice_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public serviceRow NewserviceRow() {
            return ((serviceRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new serviceRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(serviceRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.serviceRowChanged != null)) {
                this.serviceRowChanged(this, new serviceRowChangeEvent(((serviceRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.serviceRowChanging != null)) {
                this.serviceRowChanging(this, new serviceRowChangeEvent(((serviceRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.serviceRowDeleted != null)) {
                this.serviceRowDeleted(this, new serviceRowChangeEvent(((serviceRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.serviceRowDeleting != null)) {
                this.serviceRowDeleting(this, new serviceRowChangeEvent(((serviceRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveserviceRow(serviceRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            configuration ds = new configuration();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "serviceDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class nameDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnserviceID;
        
        private global::System.Data.DataColumn columnname_Text;
        
        private global::System.Data.DataColumn columnservice_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public nameDataTable() {
            this.TableName = "name";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal nameDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected nameDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn serviceIDColumn {
            get {
                return this.columnserviceID;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn name_TextColumn {
            get {
                return this.columnname_Text;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn service_IdColumn {
            get {
                return this.columnservice_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public nameRow this[int index] {
            get {
                return ((nameRow)(this.Rows[index]));
            }
        }
        
        public event nameRowChangeEventHandler nameRowChanging;
        
        public event nameRowChangeEventHandler nameRowChanged;
        
        public event nameRowChangeEventHandler nameRowDeleting;
        
        public event nameRowChangeEventHandler nameRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddnameRow(nameRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public nameRow AddnameRow(string serviceID, string name_Text, serviceRow parentserviceRowByservice_name) {
            nameRow rownameRow = ((nameRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    serviceID,
                    name_Text,
                    null};
            if ((parentserviceRowByservice_name != null)) {
                columnValuesArray[2] = parentserviceRowByservice_name[6];
            }
            rownameRow.ItemArray = columnValuesArray;
            this.Rows.Add(rownameRow);
            return rownameRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            nameDataTable cln = ((nameDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new nameDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnserviceID = base.Columns["serviceID"];
            this.columnname_Text = base.Columns["name_Text"];
            this.columnservice_Id = base.Columns["service_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnserviceID = new global::System.Data.DataColumn("serviceID", typeof(string), null, global::System.Data.MappingType.Attribute);
            base.Columns.Add(this.columnserviceID);
            this.columnname_Text = new global::System.Data.DataColumn("name_Text", typeof(string), null, global::System.Data.MappingType.SimpleContent);
            base.Columns.Add(this.columnname_Text);
            this.columnservice_Id = new global::System.Data.DataColumn("service_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnservice_Id);
            this.columnserviceID.Namespace = "";
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public nameRow NewnameRow() {
            return ((nameRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new nameRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(nameRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.nameRowChanged != null)) {
                this.nameRowChanged(this, new nameRowChangeEvent(((nameRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.nameRowChanging != null)) {
                this.nameRowChanging(this, new nameRowChangeEvent(((nameRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.nameRowDeleted != null)) {
                this.nameRowDeleted(this, new nameRowChangeEvent(((nameRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.nameRowDeleting != null)) {
                this.nameRowDeleting(this, new nameRowChangeEvent(((nameRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemovenameRow(nameRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            configuration ds = new configuration();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "nameDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class methodsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnmethods_Id;
        
        private global::System.Data.DataColumn columnservice_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public methodsDataTable() {
            this.TableName = "methods";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal methodsDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected methodsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn methods_IdColumn {
            get {
                return this.columnmethods_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn service_IdColumn {
            get {
                return this.columnservice_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public methodsRow this[int index] {
            get {
                return ((methodsRow)(this.Rows[index]));
            }
        }
        
        public event methodsRowChangeEventHandler methodsRowChanging;
        
        public event methodsRowChangeEventHandler methodsRowChanged;
        
        public event methodsRowChangeEventHandler methodsRowDeleting;
        
        public event methodsRowChangeEventHandler methodsRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddmethodsRow(methodsRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public methodsRow AddmethodsRow(serviceRow parentserviceRowByservice_methods) {
            methodsRow rowmethodsRow = ((methodsRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    null,
                    null};
            if ((parentserviceRowByservice_methods != null)) {
                columnValuesArray[1] = parentserviceRowByservice_methods[6];
            }
            rowmethodsRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowmethodsRow);
            return rowmethodsRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            methodsDataTable cln = ((methodsDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new methodsDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnmethods_Id = base.Columns["methods_Id"];
            this.columnservice_Id = base.Columns["service_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnmethods_Id = new global::System.Data.DataColumn("methods_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnmethods_Id);
            this.columnservice_Id = new global::System.Data.DataColumn("service_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnservice_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnmethods_Id}, true));
            this.columnmethods_Id.AutoIncrement = true;
            this.columnmethods_Id.AllowDBNull = false;
            this.columnmethods_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public methodsRow NewmethodsRow() {
            return ((methodsRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new methodsRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(methodsRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.methodsRowChanged != null)) {
                this.methodsRowChanged(this, new methodsRowChangeEvent(((methodsRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.methodsRowChanging != null)) {
                this.methodsRowChanging(this, new methodsRowChangeEvent(((methodsRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.methodsRowDeleted != null)) {
                this.methodsRowDeleted(this, new methodsRowChangeEvent(((methodsRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.methodsRowDeleting != null)) {
                this.methodsRowDeleting(this, new methodsRowChangeEvent(((methodsRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemovemethodsRow(methodsRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            configuration ds = new configuration();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "methodsDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class methodDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnmethod_name;
        
        private global::System.Data.DataColumn columnmethod_description;
        
        private global::System.Data.DataColumn columnmethod_Id;
        
        private global::System.Data.DataColumn columnmethods_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public methodDataTable() {
            this.TableName = "method";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal methodDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected methodDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn method_nameColumn {
            get {
                return this.columnmethod_name;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn method_descriptionColumn {
            get {
                return this.columnmethod_description;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn method_IdColumn {
            get {
                return this.columnmethod_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn methods_IdColumn {
            get {
                return this.columnmethods_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public methodRow this[int index] {
            get {
                return ((methodRow)(this.Rows[index]));
            }
        }
        
        public event methodRowChangeEventHandler methodRowChanging;
        
        public event methodRowChangeEventHandler methodRowChanged;
        
        public event methodRowChangeEventHandler methodRowDeleting;
        
        public event methodRowChangeEventHandler methodRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddmethodRow(methodRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public methodRow AddmethodRow(string method_name, string method_description, methodsRow parentmethodsRowBymethods_method) {
            methodRow rowmethodRow = ((methodRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    method_name,
                    method_description,
                    null,
                    null};
            if ((parentmethodsRowBymethods_method != null)) {
                columnValuesArray[3] = parentmethodsRowBymethods_method[0];
            }
            rowmethodRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowmethodRow);
            return rowmethodRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            methodDataTable cln = ((methodDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new methodDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnmethod_name = base.Columns["method_name"];
            this.columnmethod_description = base.Columns["method_description"];
            this.columnmethod_Id = base.Columns["method_Id"];
            this.columnmethods_Id = base.Columns["methods_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnmethod_name = new global::System.Data.DataColumn("method_name", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnmethod_name);
            this.columnmethod_description = new global::System.Data.DataColumn("method_description", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnmethod_description);
            this.columnmethod_Id = new global::System.Data.DataColumn("method_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnmethod_Id);
            this.columnmethods_Id = new global::System.Data.DataColumn("methods_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnmethods_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnmethod_Id}, true));
            this.columnmethod_Id.AutoIncrement = true;
            this.columnmethod_Id.AllowDBNull = false;
            this.columnmethod_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public methodRow NewmethodRow() {
            return ((methodRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new methodRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(methodRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.methodRowChanged != null)) {
                this.methodRowChanged(this, new methodRowChangeEvent(((methodRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.methodRowChanging != null)) {
                this.methodRowChanging(this, new methodRowChangeEvent(((methodRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.methodRowDeleted != null)) {
                this.methodRowDeleted(this, new methodRowChangeEvent(((methodRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.methodRowDeleting != null)) {
                this.methodRowDeleting(this, new methodRowChangeEvent(((methodRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemovemethodRow(methodRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            configuration ds = new configuration();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "methodDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class requestDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnrequest_Id;
        
        private global::System.Data.DataColumn columnmethod_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public requestDataTable() {
            this.TableName = "request";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal requestDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected requestDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn request_IdColumn {
            get {
                return this.columnrequest_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn method_IdColumn {
            get {
                return this.columnmethod_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public requestRow this[int index] {
            get {
                return ((requestRow)(this.Rows[index]));
            }
        }
        
        public event requestRowChangeEventHandler requestRowChanging;
        
        public event requestRowChangeEventHandler requestRowChanged;
        
        public event requestRowChangeEventHandler requestRowDeleting;
        
        public event requestRowChangeEventHandler requestRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddrequestRow(requestRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public requestRow AddrequestRow(methodRow parentmethodRowBymethod_request) {
            requestRow rowrequestRow = ((requestRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    null,
                    null};
            if ((parentmethodRowBymethod_request != null)) {
                columnValuesArray[1] = parentmethodRowBymethod_request[2];
            }
            rowrequestRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowrequestRow);
            return rowrequestRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            requestDataTable cln = ((requestDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new requestDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnrequest_Id = base.Columns["request_Id"];
            this.columnmethod_Id = base.Columns["method_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnrequest_Id = new global::System.Data.DataColumn("request_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnrequest_Id);
            this.columnmethod_Id = new global::System.Data.DataColumn("method_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnmethod_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnrequest_Id}, true));
            this.columnrequest_Id.AutoIncrement = true;
            this.columnrequest_Id.AllowDBNull = false;
            this.columnrequest_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public requestRow NewrequestRow() {
            return ((requestRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new requestRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(requestRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.requestRowChanged != null)) {
                this.requestRowChanged(this, new requestRowChangeEvent(((requestRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.requestRowChanging != null)) {
                this.requestRowChanging(this, new requestRowChangeEvent(((requestRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.requestRowDeleted != null)) {
                this.requestRowDeleted(this, new requestRowChangeEvent(((requestRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.requestRowDeleting != null)) {
                this.requestRowDeleting(this, new requestRowChangeEvent(((requestRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoverequestRow(requestRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            configuration ds = new configuration();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "requestDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class parametersDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnparameters_Id;
        
        private global::System.Data.DataColumn columnrequest_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public parametersDataTable() {
            this.TableName = "parameters";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal parametersDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected parametersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn parameters_IdColumn {
            get {
                return this.columnparameters_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn request_IdColumn {
            get {
                return this.columnrequest_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public parametersRow this[int index] {
            get {
                return ((parametersRow)(this.Rows[index]));
            }
        }
        
        public event parametersRowChangeEventHandler parametersRowChanging;
        
        public event parametersRowChangeEventHandler parametersRowChanged;
        
        public event parametersRowChangeEventHandler parametersRowDeleting;
        
        public event parametersRowChangeEventHandler parametersRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddparametersRow(parametersRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public parametersRow AddparametersRow(requestRow parentrequestRowByrequest_parameters) {
            parametersRow rowparametersRow = ((parametersRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    null,
                    null};
            if ((parentrequestRowByrequest_parameters != null)) {
                columnValuesArray[1] = parentrequestRowByrequest_parameters[0];
            }
            rowparametersRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowparametersRow);
            return rowparametersRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            parametersDataTable cln = ((parametersDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new parametersDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnparameters_Id = base.Columns["parameters_Id"];
            this.columnrequest_Id = base.Columns["request_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnparameters_Id = new global::System.Data.DataColumn("parameters_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnparameters_Id);
            this.columnrequest_Id = new global::System.Data.DataColumn("request_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnrequest_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnparameters_Id}, true));
            this.columnparameters_Id.AutoIncrement = true;
            this.columnparameters_Id.AllowDBNull = false;
            this.columnparameters_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public parametersRow NewparametersRow() {
            return ((parametersRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new parametersRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(parametersRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.parametersRowChanged != null)) {
                this.parametersRowChanged(this, new parametersRowChangeEvent(((parametersRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.parametersRowChanging != null)) {
                this.parametersRowChanging(this, new parametersRowChangeEvent(((parametersRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.parametersRowDeleted != null)) {
                this.parametersRowDeleted(this, new parametersRowChangeEvent(((parametersRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.parametersRowDeleting != null)) {
                this.parametersRowDeleting(this, new parametersRowChangeEvent(((parametersRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveparametersRow(parametersRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            configuration ds = new configuration();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "parametersDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class parameterDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnname;
        
        private global::System.Data.DataColumn columnparameter_description;
        
        private global::System.Data.DataColumn columntype;
        
        private global::System.Data.DataColumn column_default;
        
        private global::System.Data.DataColumn columnparameters_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public parameterDataTable() {
            this.TableName = "parameter";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal parameterDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected parameterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn nameColumn {
            get {
                return this.columnname;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn parameter_descriptionColumn {
            get {
                return this.columnparameter_description;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn typeColumn {
            get {
                return this.columntype;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn _defaultColumn {
            get {
                return this.column_default;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn parameters_IdColumn {
            get {
                return this.columnparameters_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public parameterRow this[int index] {
            get {
                return ((parameterRow)(this.Rows[index]));
            }
        }
        
        public event parameterRowChangeEventHandler parameterRowChanging;
        
        public event parameterRowChangeEventHandler parameterRowChanged;
        
        public event parameterRowChangeEventHandler parameterRowDeleting;
        
        public event parameterRowChangeEventHandler parameterRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddparameterRow(parameterRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public parameterRow AddparameterRow(string name, string parameter_description, string type, string _default, parametersRow parentparametersRowByparameters_parameter) {
            parameterRow rowparameterRow = ((parameterRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    name,
                    parameter_description,
                    type,
                    _default,
                    null};
            if ((parentparametersRowByparameters_parameter != null)) {
                columnValuesArray[4] = parentparametersRowByparameters_parameter[0];
            }
            rowparameterRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowparameterRow);
            return rowparameterRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            parameterDataTable cln = ((parameterDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new parameterDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnname = base.Columns["name"];
            this.columnparameter_description = base.Columns["parameter_description"];
            this.columntype = base.Columns["type"];
            this.column_default = base.Columns["default"];
            this.columnparameters_Id = base.Columns["parameters_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnname);
            this.columnparameter_description = new global::System.Data.DataColumn("parameter_description", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnparameter_description);
            this.columntype = new global::System.Data.DataColumn("type", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columntype);
            this.column_default = new global::System.Data.DataColumn("default", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.column_default);
            this.columnparameters_Id = new global::System.Data.DataColumn("parameters_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnparameters_Id);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public parameterRow NewparameterRow() {
            return ((parameterRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new parameterRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(parameterRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.parameterRowChanged != null)) {
                this.parameterRowChanged(this, new parameterRowChangeEvent(((parameterRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.parameterRowChanging != null)) {
                this.parameterRowChanging(this, new parameterRowChangeEvent(((parameterRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.parameterRowDeleted != null)) {
                this.parameterRowDeleted(this, new parameterRowChangeEvent(((parameterRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.parameterRowDeleting != null)) {
                this.parameterRowDeleting(this, new parameterRowChangeEvent(((parameterRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveparameterRow(parameterRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            configuration ds = new configuration();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "parameterDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class responseDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnNumberToDollarsResult;
        
        private global::System.Data.DataColumn columnNumberToWordsResult;
        
        private global::System.Data.DataColumn columnCountryISOCodeResult;
        
        private global::System.Data.DataColumn columnCapitalCityResult;
        
        private global::System.Data.DataColumn column_string;
        
        private global::System.Data.DataColumn columnresponse_Id;
        
        private global::System.Data.DataColumn columnmethod_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public responseDataTable() {
            this.TableName = "response";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal responseDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected responseDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn NumberToDollarsResultColumn {
            get {
                return this.columnNumberToDollarsResult;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn NumberToWordsResultColumn {
            get {
                return this.columnNumberToWordsResult;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn CountryISOCodeResultColumn {
            get {
                return this.columnCountryISOCodeResult;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn CapitalCityResultColumn {
            get {
                return this.columnCapitalCityResult;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn _stringColumn {
            get {
                return this.column_string;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn response_IdColumn {
            get {
                return this.columnresponse_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn method_IdColumn {
            get {
                return this.columnmethod_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public responseRow this[int index] {
            get {
                return ((responseRow)(this.Rows[index]));
            }
        }
        
        public event responseRowChangeEventHandler responseRowChanging;
        
        public event responseRowChangeEventHandler responseRowChanged;
        
        public event responseRowChangeEventHandler responseRowDeleting;
        
        public event responseRowChangeEventHandler responseRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddresponseRow(responseRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public responseRow AddresponseRow(string NumberToDollarsResult, string NumberToWordsResult, string CountryISOCodeResult, string CapitalCityResult, string _string, methodRow parentmethodRowBymethod_response) {
            responseRow rowresponseRow = ((responseRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    NumberToDollarsResult,
                    NumberToWordsResult,
                    CountryISOCodeResult,
                    CapitalCityResult,
                    _string,
                    null,
                    null};
            if ((parentmethodRowBymethod_response != null)) {
                columnValuesArray[6] = parentmethodRowBymethod_response[2];
            }
            rowresponseRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowresponseRow);
            return rowresponseRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            responseDataTable cln = ((responseDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new responseDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnNumberToDollarsResult = base.Columns["NumberToDollarsResult"];
            this.columnNumberToWordsResult = base.Columns["NumberToWordsResult"];
            this.columnCountryISOCodeResult = base.Columns["CountryISOCodeResult"];
            this.columnCapitalCityResult = base.Columns["CapitalCityResult"];
            this.column_string = base.Columns["string"];
            this.columnresponse_Id = base.Columns["response_Id"];
            this.columnmethod_Id = base.Columns["method_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnNumberToDollarsResult = new global::System.Data.DataColumn("NumberToDollarsResult", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnNumberToDollarsResult);
            this.columnNumberToWordsResult = new global::System.Data.DataColumn("NumberToWordsResult", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnNumberToWordsResult);
            this.columnCountryISOCodeResult = new global::System.Data.DataColumn("CountryISOCodeResult", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnCountryISOCodeResult);
            this.columnCapitalCityResult = new global::System.Data.DataColumn("CapitalCityResult", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnCapitalCityResult);
            this.column_string = new global::System.Data.DataColumn("string", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.column_string);
            this.columnresponse_Id = new global::System.Data.DataColumn("response_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnresponse_Id);
            this.columnmethod_Id = new global::System.Data.DataColumn("method_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnmethod_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnresponse_Id}, true));
            this.columnresponse_Id.AutoIncrement = true;
            this.columnresponse_Id.AllowDBNull = false;
            this.columnresponse_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public responseRow NewresponseRow() {
            return ((responseRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new responseRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(responseRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.responseRowChanged != null)) {
                this.responseRowChanged(this, new responseRowChangeEvent(((responseRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.responseRowChanging != null)) {
                this.responseRowChanging(this, new responseRowChangeEvent(((responseRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.responseRowDeleted != null)) {
                this.responseRowDeleted(this, new responseRowChangeEvent(((responseRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.responseRowDeleting != null)) {
                this.responseRowDeleting(this, new responseRowChangeEvent(((responseRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveresponseRow(responseRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            configuration ds = new configuration();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "responseDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class DecipherAllResultDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnDecipherAllResult_Id;
        
        private global::System.Data.DataColumn columnresponse_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DecipherAllResultDataTable() {
            this.TableName = "DecipherAllResult";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal DecipherAllResultDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DecipherAllResultDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn DecipherAllResult_IdColumn {
            get {
                return this.columnDecipherAllResult_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn response_IdColumn {
            get {
                return this.columnresponse_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DecipherAllResultRow this[int index] {
            get {
                return ((DecipherAllResultRow)(this.Rows[index]));
            }
        }
        
        public event DecipherAllResultRowChangeEventHandler DecipherAllResultRowChanging;
        
        public event DecipherAllResultRowChangeEventHandler DecipherAllResultRowChanged;
        
        public event DecipherAllResultRowChangeEventHandler DecipherAllResultRowDeleting;
        
        public event DecipherAllResultRowChangeEventHandler DecipherAllResultRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddDecipherAllResultRow(DecipherAllResultRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DecipherAllResultRow AddDecipherAllResultRow(responseRow parentresponseRowByresponse_DecipherAllResult) {
            DecipherAllResultRow rowDecipherAllResultRow = ((DecipherAllResultRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    null,
                    null};
            if ((parentresponseRowByresponse_DecipherAllResult != null)) {
                columnValuesArray[1] = parentresponseRowByresponse_DecipherAllResult[5];
            }
            rowDecipherAllResultRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowDecipherAllResultRow);
            return rowDecipherAllResultRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            DecipherAllResultDataTable cln = ((DecipherAllResultDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new DecipherAllResultDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnDecipherAllResult_Id = base.Columns["DecipherAllResult_Id"];
            this.columnresponse_Id = base.Columns["response_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnDecipherAllResult_Id = new global::System.Data.DataColumn("DecipherAllResult_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnDecipherAllResult_Id);
            this.columnresponse_Id = new global::System.Data.DataColumn("response_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnresponse_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnDecipherAllResult_Id}, true));
            this.columnDecipherAllResult_Id.AutoIncrement = true;
            this.columnDecipherAllResult_Id.AllowDBNull = false;
            this.columnDecipherAllResult_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DecipherAllResultRow NewDecipherAllResultRow() {
            return ((DecipherAllResultRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new DecipherAllResultRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(DecipherAllResultRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.DecipherAllResultRowChanged != null)) {
                this.DecipherAllResultRowChanged(this, new DecipherAllResultRowChangeEvent(((DecipherAllResultRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.DecipherAllResultRowChanging != null)) {
                this.DecipherAllResultRowChanging(this, new DecipherAllResultRowChangeEvent(((DecipherAllResultRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.DecipherAllResultRowDeleted != null)) {
                this.DecipherAllResultRowDeleted(this, new DecipherAllResultRowChangeEvent(((DecipherAllResultRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.DecipherAllResultRowDeleting != null)) {
                this.DecipherAllResultRowDeleting(this, new DecipherAllResultRowChangeEvent(((DecipherAllResultRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveDecipherAllResultRow(DecipherAllResultRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            configuration ds = new configuration();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "DecipherAllResultDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class CipherAllResultDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnCipherAllResult_Id;
        
        private global::System.Data.DataColumn columnresponse_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CipherAllResultDataTable() {
            this.TableName = "CipherAllResult";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal CipherAllResultDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected CipherAllResultDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn CipherAllResult_IdColumn {
            get {
                return this.columnCipherAllResult_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn response_IdColumn {
            get {
                return this.columnresponse_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CipherAllResultRow this[int index] {
            get {
                return ((CipherAllResultRow)(this.Rows[index]));
            }
        }
        
        public event CipherAllResultRowChangeEventHandler CipherAllResultRowChanging;
        
        public event CipherAllResultRowChangeEventHandler CipherAllResultRowChanged;
        
        public event CipherAllResultRowChangeEventHandler CipherAllResultRowDeleting;
        
        public event CipherAllResultRowChangeEventHandler CipherAllResultRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddCipherAllResultRow(CipherAllResultRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CipherAllResultRow AddCipherAllResultRow(responseRow parentresponseRowByresponse_CipherAllResult) {
            CipherAllResultRow rowCipherAllResultRow = ((CipherAllResultRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    null,
                    null};
            if ((parentresponseRowByresponse_CipherAllResult != null)) {
                columnValuesArray[1] = parentresponseRowByresponse_CipherAllResult[5];
            }
            rowCipherAllResultRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowCipherAllResultRow);
            return rowCipherAllResultRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            CipherAllResultDataTable cln = ((CipherAllResultDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new CipherAllResultDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnCipherAllResult_Id = base.Columns["CipherAllResult_Id"];
            this.columnresponse_Id = base.Columns["response_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnCipherAllResult_Id = new global::System.Data.DataColumn("CipherAllResult_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnCipherAllResult_Id);
            this.columnresponse_Id = new global::System.Data.DataColumn("response_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnresponse_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnCipherAllResult_Id}, true));
            this.columnCipherAllResult_Id.AutoIncrement = true;
            this.columnCipherAllResult_Id.AllowDBNull = false;
            this.columnCipherAllResult_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CipherAllResultRow NewCipherAllResultRow() {
            return ((CipherAllResultRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new CipherAllResultRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(CipherAllResultRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.CipherAllResultRowChanged != null)) {
                this.CipherAllResultRowChanged(this, new CipherAllResultRowChangeEvent(((CipherAllResultRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.CipherAllResultRowChanging != null)) {
                this.CipherAllResultRowChanging(this, new CipherAllResultRowChangeEvent(((CipherAllResultRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.CipherAllResultRowDeleted != null)) {
                this.CipherAllResultRowDeleted(this, new CipherAllResultRowChangeEvent(((CipherAllResultRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.CipherAllResultRowDeleting != null)) {
                this.CipherAllResultRowDeleting(this, new CipherAllResultRowChangeEvent(((CipherAllResultRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveCipherAllResultRow(CipherAllResultRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            configuration ds = new configuration();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "CipherAllResultDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class tCurrencyDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnsISOCode;
        
        private global::System.Data.DataColumn columnsName;
        
        private global::System.Data.DataColumn columnresponse_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tCurrencyDataTable() {
            this.TableName = "tCurrency";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal tCurrencyDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected tCurrencyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn sISOCodeColumn {
            get {
                return this.columnsISOCode;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn sNameColumn {
            get {
                return this.columnsName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn response_IdColumn {
            get {
                return this.columnresponse_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tCurrencyRow this[int index] {
            get {
                return ((tCurrencyRow)(this.Rows[index]));
            }
        }
        
        public event tCurrencyRowChangeEventHandler tCurrencyRowChanging;
        
        public event tCurrencyRowChangeEventHandler tCurrencyRowChanged;
        
        public event tCurrencyRowChangeEventHandler tCurrencyRowDeleting;
        
        public event tCurrencyRowChangeEventHandler tCurrencyRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddtCurrencyRow(tCurrencyRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tCurrencyRow AddtCurrencyRow(string sISOCode, string sName, responseRow parentresponseRowByresponse_tCurrency) {
            tCurrencyRow rowtCurrencyRow = ((tCurrencyRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    sISOCode,
                    sName,
                    null};
            if ((parentresponseRowByresponse_tCurrency != null)) {
                columnValuesArray[2] = parentresponseRowByresponse_tCurrency[5];
            }
            rowtCurrencyRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowtCurrencyRow);
            return rowtCurrencyRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            tCurrencyDataTable cln = ((tCurrencyDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new tCurrencyDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnsISOCode = base.Columns["sISOCode"];
            this.columnsName = base.Columns["sName"];
            this.columnresponse_Id = base.Columns["response_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnsISOCode = new global::System.Data.DataColumn("sISOCode", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnsISOCode);
            this.columnsName = new global::System.Data.DataColumn("sName", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnsName);
            this.columnresponse_Id = new global::System.Data.DataColumn("response_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnresponse_Id);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tCurrencyRow NewtCurrencyRow() {
            return ((tCurrencyRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new tCurrencyRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(tCurrencyRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.tCurrencyRowChanged != null)) {
                this.tCurrencyRowChanged(this, new tCurrencyRowChangeEvent(((tCurrencyRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.tCurrencyRowChanging != null)) {
                this.tCurrencyRowChanging(this, new tCurrencyRowChangeEvent(((tCurrencyRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.tCurrencyRowDeleted != null)) {
                this.tCurrencyRowDeleted(this, new tCurrencyRowChangeEvent(((tCurrencyRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.tCurrencyRowDeleting != null)) {
                this.tCurrencyRowDeleting(this, new tCurrencyRowChangeEvent(((tCurrencyRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemovetCurrencyRow(tCurrencyRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            configuration ds = new configuration();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "tCurrencyDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class tCountryCodeAndNameDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnsISOCode;
        
        private global::System.Data.DataColumn columnsName;
        
        private global::System.Data.DataColumn columnresponse_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tCountryCodeAndNameDataTable() {
            this.TableName = "tCountryCodeAndName";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal tCountryCodeAndNameDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected tCountryCodeAndNameDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn sISOCodeColumn {
            get {
                return this.columnsISOCode;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn sNameColumn {
            get {
                return this.columnsName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn response_IdColumn {
            get {
                return this.columnresponse_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tCountryCodeAndNameRow this[int index] {
            get {
                return ((tCountryCodeAndNameRow)(this.Rows[index]));
            }
        }
        
        public event tCountryCodeAndNameRowChangeEventHandler tCountryCodeAndNameRowChanging;
        
        public event tCountryCodeAndNameRowChangeEventHandler tCountryCodeAndNameRowChanged;
        
        public event tCountryCodeAndNameRowChangeEventHandler tCountryCodeAndNameRowDeleting;
        
        public event tCountryCodeAndNameRowChangeEventHandler tCountryCodeAndNameRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddtCountryCodeAndNameRow(tCountryCodeAndNameRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tCountryCodeAndNameRow AddtCountryCodeAndNameRow(string sISOCode, string sName, responseRow parentresponseRowByresponse_tCountryCodeAndName) {
            tCountryCodeAndNameRow rowtCountryCodeAndNameRow = ((tCountryCodeAndNameRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    sISOCode,
                    sName,
                    null};
            if ((parentresponseRowByresponse_tCountryCodeAndName != null)) {
                columnValuesArray[2] = parentresponseRowByresponse_tCountryCodeAndName[5];
            }
            rowtCountryCodeAndNameRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowtCountryCodeAndNameRow);
            return rowtCountryCodeAndNameRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            tCountryCodeAndNameDataTable cln = ((tCountryCodeAndNameDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new tCountryCodeAndNameDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnsISOCode = base.Columns["sISOCode"];
            this.columnsName = base.Columns["sName"];
            this.columnresponse_Id = base.Columns["response_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnsISOCode = new global::System.Data.DataColumn("sISOCode", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnsISOCode);
            this.columnsName = new global::System.Data.DataColumn("sName", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnsName);
            this.columnresponse_Id = new global::System.Data.DataColumn("response_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnresponse_Id);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tCountryCodeAndNameRow NewtCountryCodeAndNameRow() {
            return ((tCountryCodeAndNameRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new tCountryCodeAndNameRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(tCountryCodeAndNameRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.tCountryCodeAndNameRowChanged != null)) {
                this.tCountryCodeAndNameRowChanged(this, new tCountryCodeAndNameRowChangeEvent(((tCountryCodeAndNameRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.tCountryCodeAndNameRowChanging != null)) {
                this.tCountryCodeAndNameRowChanging(this, new tCountryCodeAndNameRowChangeEvent(((tCountryCodeAndNameRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.tCountryCodeAndNameRowDeleted != null)) {
                this.tCountryCodeAndNameRowDeleted(this, new tCountryCodeAndNameRowChangeEvent(((tCountryCodeAndNameRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.tCountryCodeAndNameRowDeleting != null)) {
                this.tCountryCodeAndNameRowDeleting(this, new tCountryCodeAndNameRowChangeEvent(((tCountryCodeAndNameRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemovetCountryCodeAndNameRow(tCountryCodeAndNameRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            configuration ds = new configuration();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "tCountryCodeAndNameDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class tTeamInfoDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columniId;
        
        private global::System.Data.DataColumn columnsName;
        
        private global::System.Data.DataColumn columnsCountryFlag;
        
        private global::System.Data.DataColumn columnsWikipediaURL;
        
        private global::System.Data.DataColumn columnsCountryFlagLarge;
        
        private global::System.Data.DataColumn columnresponse_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tTeamInfoDataTable() {
            this.TableName = "tTeamInfo";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal tTeamInfoDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected tTeamInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn iIdColumn {
            get {
                return this.columniId;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn sNameColumn {
            get {
                return this.columnsName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn sCountryFlagColumn {
            get {
                return this.columnsCountryFlag;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn sWikipediaURLColumn {
            get {
                return this.columnsWikipediaURL;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn sCountryFlagLargeColumn {
            get {
                return this.columnsCountryFlagLarge;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn response_IdColumn {
            get {
                return this.columnresponse_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tTeamInfoRow this[int index] {
            get {
                return ((tTeamInfoRow)(this.Rows[index]));
            }
        }
        
        public event tTeamInfoRowChangeEventHandler tTeamInfoRowChanging;
        
        public event tTeamInfoRowChangeEventHandler tTeamInfoRowChanged;
        
        public event tTeamInfoRowChangeEventHandler tTeamInfoRowDeleting;
        
        public event tTeamInfoRowChangeEventHandler tTeamInfoRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddtTeamInfoRow(tTeamInfoRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tTeamInfoRow AddtTeamInfoRow(string iId, string sName, string sCountryFlag, string sWikipediaURL, string sCountryFlagLarge, responseRow parentresponseRowByresponse_tTeamInfo) {
            tTeamInfoRow rowtTeamInfoRow = ((tTeamInfoRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    iId,
                    sName,
                    sCountryFlag,
                    sWikipediaURL,
                    sCountryFlagLarge,
                    null};
            if ((parentresponseRowByresponse_tTeamInfo != null)) {
                columnValuesArray[5] = parentresponseRowByresponse_tTeamInfo[5];
            }
            rowtTeamInfoRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowtTeamInfoRow);
            return rowtTeamInfoRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            tTeamInfoDataTable cln = ((tTeamInfoDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new tTeamInfoDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columniId = base.Columns["iId"];
            this.columnsName = base.Columns["sName"];
            this.columnsCountryFlag = base.Columns["sCountryFlag"];
            this.columnsWikipediaURL = base.Columns["sWikipediaURL"];
            this.columnsCountryFlagLarge = base.Columns["sCountryFlagLarge"];
            this.columnresponse_Id = base.Columns["response_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columniId = new global::System.Data.DataColumn("iId", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columniId);
            this.columnsName = new global::System.Data.DataColumn("sName", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnsName);
            this.columnsCountryFlag = new global::System.Data.DataColumn("sCountryFlag", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnsCountryFlag);
            this.columnsWikipediaURL = new global::System.Data.DataColumn("sWikipediaURL", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnsWikipediaURL);
            this.columnsCountryFlagLarge = new global::System.Data.DataColumn("sCountryFlagLarge", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnsCountryFlagLarge);
            this.columnresponse_Id = new global::System.Data.DataColumn("response_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnresponse_Id);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tTeamInfoRow NewtTeamInfoRow() {
            return ((tTeamInfoRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new tTeamInfoRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(tTeamInfoRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.tTeamInfoRowChanged != null)) {
                this.tTeamInfoRowChanged(this, new tTeamInfoRowChangeEvent(((tTeamInfoRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.tTeamInfoRowChanging != null)) {
                this.tTeamInfoRowChanging(this, new tTeamInfoRowChangeEvent(((tTeamInfoRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.tTeamInfoRowDeleted != null)) {
                this.tTeamInfoRowDeleted(this, new tTeamInfoRowChangeEvent(((tTeamInfoRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.tTeamInfoRowDeleting != null)) {
                this.tTeamInfoRowDeleting(this, new tTeamInfoRowChangeEvent(((tTeamInfoRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemovetTeamInfoRow(tTeamInfoRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            configuration ds = new configuration();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "tTeamInfoDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class StadiumNamesResultDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnStadiumNamesResult_Id;
        
        private global::System.Data.DataColumn columnresponse_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StadiumNamesResultDataTable() {
            this.TableName = "StadiumNamesResult";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal StadiumNamesResultDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected StadiumNamesResultDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn StadiumNamesResult_IdColumn {
            get {
                return this.columnStadiumNamesResult_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn response_IdColumn {
            get {
                return this.columnresponse_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StadiumNamesResultRow this[int index] {
            get {
                return ((StadiumNamesResultRow)(this.Rows[index]));
            }
        }
        
        public event StadiumNamesResultRowChangeEventHandler StadiumNamesResultRowChanging;
        
        public event StadiumNamesResultRowChangeEventHandler StadiumNamesResultRowChanged;
        
        public event StadiumNamesResultRowChangeEventHandler StadiumNamesResultRowDeleting;
        
        public event StadiumNamesResultRowChangeEventHandler StadiumNamesResultRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddStadiumNamesResultRow(StadiumNamesResultRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StadiumNamesResultRow AddStadiumNamesResultRow(responseRow parentresponseRowByresponse_StadiumNamesResult) {
            StadiumNamesResultRow rowStadiumNamesResultRow = ((StadiumNamesResultRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    null,
                    null};
            if ((parentresponseRowByresponse_StadiumNamesResult != null)) {
                columnValuesArray[1] = parentresponseRowByresponse_StadiumNamesResult[5];
            }
            rowStadiumNamesResultRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowStadiumNamesResultRow);
            return rowStadiumNamesResultRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            StadiumNamesResultDataTable cln = ((StadiumNamesResultDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new StadiumNamesResultDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnStadiumNamesResult_Id = base.Columns["StadiumNamesResult_Id"];
            this.columnresponse_Id = base.Columns["response_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnStadiumNamesResult_Id = new global::System.Data.DataColumn("StadiumNamesResult_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnStadiumNamesResult_Id);
            this.columnresponse_Id = new global::System.Data.DataColumn("response_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnresponse_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnStadiumNamesResult_Id}, true));
            this.columnStadiumNamesResult_Id.AutoIncrement = true;
            this.columnStadiumNamesResult_Id.AllowDBNull = false;
            this.columnStadiumNamesResult_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StadiumNamesResultRow NewStadiumNamesResultRow() {
            return ((StadiumNamesResultRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new StadiumNamesResultRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(StadiumNamesResultRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.StadiumNamesResultRowChanged != null)) {
                this.StadiumNamesResultRowChanged(this, new StadiumNamesResultRowChangeEvent(((StadiumNamesResultRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.StadiumNamesResultRowChanging != null)) {
                this.StadiumNamesResultRowChanging(this, new StadiumNamesResultRowChangeEvent(((StadiumNamesResultRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.StadiumNamesResultRowDeleted != null)) {
                this.StadiumNamesResultRowDeleted(this, new StadiumNamesResultRowChangeEvent(((StadiumNamesResultRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.StadiumNamesResultRowDeleting != null)) {
                this.StadiumNamesResultRowDeleting(this, new StadiumNamesResultRowChangeEvent(((StadiumNamesResultRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveStadiumNamesResultRow(StadiumNamesResultRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            configuration ds = new configuration();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "StadiumNamesResultDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class tTopSelectedGoalScorerDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnsName;
        
        private global::System.Data.DataColumn columniSelected;
        
        private global::System.Data.DataColumn columntTopSelectedGoalScorer_Id;
        
        private global::System.Data.DataColumn columnresponse_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tTopSelectedGoalScorerDataTable() {
            this.TableName = "tTopSelectedGoalScorer";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal tTopSelectedGoalScorerDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected tTopSelectedGoalScorerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn sNameColumn {
            get {
                return this.columnsName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn iSelectedColumn {
            get {
                return this.columniSelected;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn tTopSelectedGoalScorer_IdColumn {
            get {
                return this.columntTopSelectedGoalScorer_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn response_IdColumn {
            get {
                return this.columnresponse_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tTopSelectedGoalScorerRow this[int index] {
            get {
                return ((tTopSelectedGoalScorerRow)(this.Rows[index]));
            }
        }
        
        public event tTopSelectedGoalScorerRowChangeEventHandler tTopSelectedGoalScorerRowChanging;
        
        public event tTopSelectedGoalScorerRowChangeEventHandler tTopSelectedGoalScorerRowChanged;
        
        public event tTopSelectedGoalScorerRowChangeEventHandler tTopSelectedGoalScorerRowDeleting;
        
        public event tTopSelectedGoalScorerRowChangeEventHandler tTopSelectedGoalScorerRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddtTopSelectedGoalScorerRow(tTopSelectedGoalScorerRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tTopSelectedGoalScorerRow AddtTopSelectedGoalScorerRow(string sName, string iSelected, responseRow parentresponseRowByresponse_tTopSelectedGoalScorer) {
            tTopSelectedGoalScorerRow rowtTopSelectedGoalScorerRow = ((tTopSelectedGoalScorerRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    sName,
                    iSelected,
                    null,
                    null};
            if ((parentresponseRowByresponse_tTopSelectedGoalScorer != null)) {
                columnValuesArray[3] = parentresponseRowByresponse_tTopSelectedGoalScorer[5];
            }
            rowtTopSelectedGoalScorerRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowtTopSelectedGoalScorerRow);
            return rowtTopSelectedGoalScorerRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            tTopSelectedGoalScorerDataTable cln = ((tTopSelectedGoalScorerDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new tTopSelectedGoalScorerDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnsName = base.Columns["sName"];
            this.columniSelected = base.Columns["iSelected"];
            this.columntTopSelectedGoalScorer_Id = base.Columns["tTopSelectedGoalScorer_Id"];
            this.columnresponse_Id = base.Columns["response_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnsName = new global::System.Data.DataColumn("sName", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnsName);
            this.columniSelected = new global::System.Data.DataColumn("iSelected", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columniSelected);
            this.columntTopSelectedGoalScorer_Id = new global::System.Data.DataColumn("tTopSelectedGoalScorer_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columntTopSelectedGoalScorer_Id);
            this.columnresponse_Id = new global::System.Data.DataColumn("response_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnresponse_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columntTopSelectedGoalScorer_Id}, true));
            this.columntTopSelectedGoalScorer_Id.AutoIncrement = true;
            this.columntTopSelectedGoalScorer_Id.AllowDBNull = false;
            this.columntTopSelectedGoalScorer_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tTopSelectedGoalScorerRow NewtTopSelectedGoalScorerRow() {
            return ((tTopSelectedGoalScorerRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new tTopSelectedGoalScorerRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(tTopSelectedGoalScorerRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.tTopSelectedGoalScorerRowChanged != null)) {
                this.tTopSelectedGoalScorerRowChanged(this, new tTopSelectedGoalScorerRowChangeEvent(((tTopSelectedGoalScorerRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.tTopSelectedGoalScorerRowChanging != null)) {
                this.tTopSelectedGoalScorerRowChanging(this, new tTopSelectedGoalScorerRowChangeEvent(((tTopSelectedGoalScorerRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.tTopSelectedGoalScorerRowDeleted != null)) {
                this.tTopSelectedGoalScorerRowDeleted(this, new tTopSelectedGoalScorerRowChangeEvent(((tTopSelectedGoalScorerRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.tTopSelectedGoalScorerRowDeleting != null)) {
                this.tTopSelectedGoalScorerRowDeleting(this, new tTopSelectedGoalScorerRowChangeEvent(((tTopSelectedGoalScorerRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemovetTopSelectedGoalScorerRow(tTopSelectedGoalScorerRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            configuration ds = new configuration();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "tTopSelectedGoalScorerDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class CountriesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnCountries_Id;
        
        private global::System.Data.DataColumn columntTopSelectedGoalScorer_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CountriesDataTable() {
            this.TableName = "Countries";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal CountriesDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected CountriesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn Countries_IdColumn {
            get {
                return this.columnCountries_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn tTopSelectedGoalScorer_IdColumn {
            get {
                return this.columntTopSelectedGoalScorer_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CountriesRow this[int index] {
            get {
                return ((CountriesRow)(this.Rows[index]));
            }
        }
        
        public event CountriesRowChangeEventHandler CountriesRowChanging;
        
        public event CountriesRowChangeEventHandler CountriesRowChanged;
        
        public event CountriesRowChangeEventHandler CountriesRowDeleting;
        
        public event CountriesRowChangeEventHandler CountriesRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddCountriesRow(CountriesRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CountriesRow AddCountriesRow(tTopSelectedGoalScorerRow parenttTopSelectedGoalScorerRowBytTopSelectedGoalScorer_Countries) {
            CountriesRow rowCountriesRow = ((CountriesRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    null,
                    null};
            if ((parenttTopSelectedGoalScorerRowBytTopSelectedGoalScorer_Countries != null)) {
                columnValuesArray[1] = parenttTopSelectedGoalScorerRowBytTopSelectedGoalScorer_Countries[2];
            }
            rowCountriesRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowCountriesRow);
            return rowCountriesRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            CountriesDataTable cln = ((CountriesDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new CountriesDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnCountries_Id = base.Columns["Countries_Id"];
            this.columntTopSelectedGoalScorer_Id = base.Columns["tTopSelectedGoalScorer_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnCountries_Id = new global::System.Data.DataColumn("Countries_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnCountries_Id);
            this.columntTopSelectedGoalScorer_Id = new global::System.Data.DataColumn("tTopSelectedGoalScorer_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columntTopSelectedGoalScorer_Id);
            this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                            this.columnCountries_Id}, true));
            this.columnCountries_Id.AutoIncrement = true;
            this.columnCountries_Id.AllowDBNull = false;
            this.columnCountries_Id.Unique = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CountriesRow NewCountriesRow() {
            return ((CountriesRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new CountriesRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(CountriesRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.CountriesRowChanged != null)) {
                this.CountriesRowChanged(this, new CountriesRowChangeEvent(((CountriesRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.CountriesRowChanging != null)) {
                this.CountriesRowChanging(this, new CountriesRowChangeEvent(((CountriesRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.CountriesRowDeleted != null)) {
                this.CountriesRowDeleted(this, new CountriesRowChangeEvent(((CountriesRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.CountriesRowDeleting != null)) {
                this.CountriesRowDeleting(this, new CountriesRowChangeEvent(((CountriesRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemoveCountriesRow(CountriesRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            configuration ds = new configuration();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "CountriesDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class tCountrySelectedTopScorerDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columnsName;
        
        private global::System.Data.DataColumn columniCount;
        
        private global::System.Data.DataColumn columnCountries_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tCountrySelectedTopScorerDataTable() {
            this.TableName = "tCountrySelectedTopScorer";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal tCountrySelectedTopScorerDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected tCountrySelectedTopScorerDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn sNameColumn {
            get {
                return this.columnsName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn iCountColumn {
            get {
                return this.columniCount;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn Countries_IdColumn {
            get {
                return this.columnCountries_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tCountrySelectedTopScorerRow this[int index] {
            get {
                return ((tCountrySelectedTopScorerRow)(this.Rows[index]));
            }
        }
        
        public event tCountrySelectedTopScorerRowChangeEventHandler tCountrySelectedTopScorerRowChanging;
        
        public event tCountrySelectedTopScorerRowChangeEventHandler tCountrySelectedTopScorerRowChanged;
        
        public event tCountrySelectedTopScorerRowChangeEventHandler tCountrySelectedTopScorerRowDeleting;
        
        public event tCountrySelectedTopScorerRowChangeEventHandler tCountrySelectedTopScorerRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddtCountrySelectedTopScorerRow(tCountrySelectedTopScorerRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tCountrySelectedTopScorerRow AddtCountrySelectedTopScorerRow(string sName, string iCount, CountriesRow parentCountriesRowByCountries_tCountrySelectedTopScorer) {
            tCountrySelectedTopScorerRow rowtCountrySelectedTopScorerRow = ((tCountrySelectedTopScorerRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    sName,
                    iCount,
                    null};
            if ((parentCountriesRowByCountries_tCountrySelectedTopScorer != null)) {
                columnValuesArray[2] = parentCountriesRowByCountries_tCountrySelectedTopScorer[0];
            }
            rowtCountrySelectedTopScorerRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowtCountrySelectedTopScorerRow);
            return rowtCountrySelectedTopScorerRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            tCountrySelectedTopScorerDataTable cln = ((tCountrySelectedTopScorerDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new tCountrySelectedTopScorerDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columnsName = base.Columns["sName"];
            this.columniCount = base.Columns["iCount"];
            this.columnCountries_Id = base.Columns["Countries_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columnsName = new global::System.Data.DataColumn("sName", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnsName);
            this.columniCount = new global::System.Data.DataColumn("iCount", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columniCount);
            this.columnCountries_Id = new global::System.Data.DataColumn("Countries_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnCountries_Id);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tCountrySelectedTopScorerRow NewtCountrySelectedTopScorerRow() {
            return ((tCountrySelectedTopScorerRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new tCountrySelectedTopScorerRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(tCountrySelectedTopScorerRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.tCountrySelectedTopScorerRowChanged != null)) {
                this.tCountrySelectedTopScorerRowChanged(this, new tCountrySelectedTopScorerRowChangeEvent(((tCountrySelectedTopScorerRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.tCountrySelectedTopScorerRowChanging != null)) {
                this.tCountrySelectedTopScorerRowChanging(this, new tCountrySelectedTopScorerRowChangeEvent(((tCountrySelectedTopScorerRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.tCountrySelectedTopScorerRowDeleted != null)) {
                this.tCountrySelectedTopScorerRowDeleted(this, new tCountrySelectedTopScorerRowChangeEvent(((tCountrySelectedTopScorerRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.tCountrySelectedTopScorerRowDeleting != null)) {
                this.tCountrySelectedTopScorerRowDeleting(this, new tCountrySelectedTopScorerRowChangeEvent(((tCountrySelectedTopScorerRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemovetCountrySelectedTopScorerRow(tCountrySelectedTopScorerRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            configuration ds = new configuration();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "tCountrySelectedTopScorerDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents the strongly named DataTable class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
    public partial class tPlayerNamesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
        
        private global::System.Data.DataColumn columniId;
        
        private global::System.Data.DataColumn columnsName;
        
        private global::System.Data.DataColumn columnsCountryName;
        
        private global::System.Data.DataColumn columnsCountryFlag;
        
        private global::System.Data.DataColumn columnsCountryFlagLarge;
        
        private global::System.Data.DataColumn columnresponse_Id;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tPlayerNamesDataTable() {
            this.TableName = "tPlayerNames";
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal tPlayerNamesDataTable(global::System.Data.DataTable table) {
            this.TableName = table.TableName;
            if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                this.CaseSensitive = table.CaseSensitive;
            }
            if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                this.Locale = table.Locale;
            }
            if ((table.Namespace != table.DataSet.Namespace)) {
                this.Namespace = table.Namespace;
            }
            this.Prefix = table.Prefix;
            this.MinimumCapacity = table.MinimumCapacity;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected tPlayerNamesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            this.InitVars();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn iIdColumn {
            get {
                return this.columniId;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn sNameColumn {
            get {
                return this.columnsName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn sCountryNameColumn {
            get {
                return this.columnsCountryName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn sCountryFlagColumn {
            get {
                return this.columnsCountryFlag;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn sCountryFlagLargeColumn {
            get {
                return this.columnsCountryFlagLarge;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataColumn response_IdColumn {
            get {
                return this.columnresponse_Id;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int Count {
            get {
                return this.Rows.Count;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tPlayerNamesRow this[int index] {
            get {
                return ((tPlayerNamesRow)(this.Rows[index]));
            }
        }
        
        public event tPlayerNamesRowChangeEventHandler tPlayerNamesRowChanging;
        
        public event tPlayerNamesRowChangeEventHandler tPlayerNamesRowChanged;
        
        public event tPlayerNamesRowChangeEventHandler tPlayerNamesRowDeleting;
        
        public event tPlayerNamesRowChangeEventHandler tPlayerNamesRowDeleted;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void AddtPlayerNamesRow(tPlayerNamesRow row) {
            this.Rows.Add(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tPlayerNamesRow AddtPlayerNamesRow(string iId, string sName, string sCountryName, string sCountryFlag, string sCountryFlagLarge, responseRow parentresponseRowByresponse_tPlayerNames) {
            tPlayerNamesRow rowtPlayerNamesRow = ((tPlayerNamesRow)(this.NewRow()));
            object[] columnValuesArray = new object[] {
                    iId,
                    sName,
                    sCountryName,
                    sCountryFlag,
                    sCountryFlagLarge,
                    null};
            if ((parentresponseRowByresponse_tPlayerNames != null)) {
                columnValuesArray[5] = parentresponseRowByresponse_tPlayerNames[5];
            }
            rowtPlayerNamesRow.ItemArray = columnValuesArray;
            this.Rows.Add(rowtPlayerNamesRow);
            return rowtPlayerNamesRow;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual global::System.Collections.IEnumerator GetEnumerator() {
            return this.Rows.GetEnumerator();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataTable Clone() {
            tPlayerNamesDataTable cln = ((tPlayerNamesDataTable)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataTable CreateInstance() {
            return new tPlayerNamesDataTable();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.columniId = base.Columns["iId"];
            this.columnsName = base.Columns["sName"];
            this.columnsCountryName = base.Columns["sCountryName"];
            this.columnsCountryFlag = base.Columns["sCountryFlag"];
            this.columnsCountryFlagLarge = base.Columns["sCountryFlagLarge"];
            this.columnresponse_Id = base.Columns["response_Id"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.columniId = new global::System.Data.DataColumn("iId", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columniId);
            this.columnsName = new global::System.Data.DataColumn("sName", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnsName);
            this.columnsCountryName = new global::System.Data.DataColumn("sCountryName", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnsCountryName);
            this.columnsCountryFlag = new global::System.Data.DataColumn("sCountryFlag", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnsCountryFlag);
            this.columnsCountryFlagLarge = new global::System.Data.DataColumn("sCountryFlagLarge", typeof(string), null, global::System.Data.MappingType.Element);
            base.Columns.Add(this.columnsCountryFlagLarge);
            this.columnresponse_Id = new global::System.Data.DataColumn("response_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
            base.Columns.Add(this.columnresponse_Id);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tPlayerNamesRow NewtPlayerNamesRow() {
            return ((tPlayerNamesRow)(this.NewRow()));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
            return new tPlayerNamesRow(builder);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Type GetRowType() {
            return typeof(tPlayerNamesRow);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanged(e);
            if ((this.tPlayerNamesRowChanged != null)) {
                this.tPlayerNamesRowChanged(this, new tPlayerNamesRowChangeEvent(((tPlayerNamesRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowChanging(e);
            if ((this.tPlayerNamesRowChanging != null)) {
                this.tPlayerNamesRowChanging(this, new tPlayerNamesRowChangeEvent(((tPlayerNamesRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleted(e);
            if ((this.tPlayerNamesRowDeleted != null)) {
                this.tPlayerNamesRowDeleted(this, new tPlayerNamesRowChangeEvent(((tPlayerNamesRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
            base.OnRowDeleting(e);
            if ((this.tPlayerNamesRowDeleting != null)) {
                this.tPlayerNamesRowDeleting(this, new tPlayerNamesRowChangeEvent(((tPlayerNamesRow)(e.Row)), e.Action));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void RemovetPlayerNamesRow(tPlayerNamesRow row) {
            this.Rows.Remove(row);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            configuration ds = new configuration();
            global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
            any1.Namespace = "http://www.w3.org/2001/XMLSchema";
            any1.MinOccurs = new decimal(0);
            any1.MaxOccurs = decimal.MaxValue;
            any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any1);
            global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
            any2.MinOccurs = new decimal(1);
            any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
            sequence.Items.Add(any2);
            global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute1.Name = "namespace";
            attribute1.FixedValue = ds.Namespace;
            type.Attributes.Add(attribute1);
            global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
            attribute2.Name = "tableTypeName";
            attribute2.FixedValue = "tPlayerNamesDataTable";
            type.Attributes.Add(attribute2);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class _stringRow : global::System.Data.DataRow {
        
        private _stringDataTable table_string;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal _stringRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.table_string = ((_stringDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int DecipherAllResult_Id {
            get {
                try {
                    return ((int)(this[this.table_string.DecipherAllResult_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'DecipherAllResult_Id\' in table \'string\' is DBNull.", e);
                }
            }
            set {
                this[this.table_string.DecipherAllResult_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int CipherAllResult_Id {
            get {
                try {
                    return ((int)(this[this.table_string.CipherAllResult_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'CipherAllResult_Id\' in table \'string\' is DBNull.", e);
                }
            }
            set {
                this[this.table_string.CipherAllResult_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int StadiumNamesResult_Id {
            get {
                try {
                    return ((int)(this[this.table_string.StadiumNamesResult_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'StadiumNamesResult_Id\' in table \'string\' is DBNull.", e);
                }
            }
            set {
                this[this.table_string.StadiumNamesResult_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DecipherAllResultRow DecipherAllResultRow {
            get {
                return ((DecipherAllResultRow)(this.GetParentRow(this.Table.ParentRelations["DecipherAllResult_string"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["DecipherAllResult_string"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CipherAllResultRow CipherAllResultRow {
            get {
                return ((CipherAllResultRow)(this.GetParentRow(this.Table.ParentRelations["CipherAllResult_string"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["CipherAllResult_string"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StadiumNamesResultRow StadiumNamesResultRow {
            get {
                return ((StadiumNamesResultRow)(this.GetParentRow(this.Table.ParentRelations["StadiumNamesResult_string"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["StadiumNamesResult_string"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsDecipherAllResult_IdNull() {
            return this.IsNull(this.table_string.DecipherAllResult_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetDecipherAllResult_IdNull() {
            this[this.table_string.DecipherAllResult_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsCipherAllResult_IdNull() {
            return this.IsNull(this.table_string.CipherAllResult_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetCipherAllResult_IdNull() {
            this[this.table_string.CipherAllResult_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsStadiumNamesResult_IdNull() {
            return this.IsNull(this.table_string.StadiumNamesResult_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetStadiumNamesResult_IdNull() {
            this[this.table_string.StadiumNamesResult_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class servicesRow : global::System.Data.DataRow {
        
        private servicesDataTable tableservices;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal servicesRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableservices = ((servicesDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int services_Id {
            get {
                return ((int)(this[this.tableservices.services_IdColumn]));
            }
            set {
                this[this.tableservices.services_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public serviceRow[] GetserviceRows() {
            if ((this.Table.ChildRelations["services_service"] == null)) {
                return new serviceRow[0];
            }
            else {
                return ((serviceRow[])(base.GetChildRows(this.Table.ChildRelations["services_service"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class serviceRow : global::System.Data.DataRow {
        
        private serviceDataTable tableservice;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal serviceRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableservice = ((serviceDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string serviceID {
            get {
                try {
                    return ((string)(this[this.tableservice.serviceIDColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'serviceID\' in table \'service\' is DBNull.", e);
                }
            }
            set {
                this[this.tableservice.serviceIDColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string service_URL {
            get {
                try {
                    return ((string)(this[this.tableservice.service_URLColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'service_URL\' in table \'service\' is DBNull.", e);
                }
            }
            set {
                this[this.tableservice.service_URLColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string info_URL {
            get {
                try {
                    return ((string)(this[this.tableservice.info_URLColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'info_URL\' in table \'service\' is DBNull.", e);
                }
            }
            set {
                this[this.tableservice.info_URLColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string wsdl_URL {
            get {
                try {
                    return ((string)(this[this.tableservice.wsdl_URLColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'wsdl_URL\' in table \'service\' is DBNull.", e);
                }
            }
            set {
                this[this.tableservice.wsdl_URLColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string xmlns_tns {
            get {
                try {
                    return ((string)(this[this.tableservice.xmlns_tnsColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'xmlns_tns\' in table \'service\' is DBNull.", e);
                }
            }
            set {
                this[this.tableservice.xmlns_tnsColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string service_description {
            get {
                try {
                    return ((string)(this[this.tableservice.service_descriptionColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'service_description\' in table \'service\' is DBNull.", e);
                }
            }
            set {
                this[this.tableservice.service_descriptionColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int service_Id {
            get {
                return ((int)(this[this.tableservice.service_IdColumn]));
            }
            set {
                this[this.tableservice.service_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int services_Id {
            get {
                try {
                    return ((int)(this[this.tableservice.services_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'services_Id\' in table \'service\' is DBNull.", e);
                }
            }
            set {
                this[this.tableservice.services_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public servicesRow servicesRow {
            get {
                return ((servicesRow)(this.GetParentRow(this.Table.ParentRelations["services_service"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["services_service"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsserviceIDNull() {
            return this.IsNull(this.tableservice.serviceIDColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetserviceIDNull() {
            this[this.tableservice.serviceIDColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isservice_URLNull() {
            return this.IsNull(this.tableservice.service_URLColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setservice_URLNull() {
            this[this.tableservice.service_URLColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isinfo_URLNull() {
            return this.IsNull(this.tableservice.info_URLColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setinfo_URLNull() {
            this[this.tableservice.info_URLColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Iswsdl_URLNull() {
            return this.IsNull(this.tableservice.wsdl_URLColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setwsdl_URLNull() {
            this[this.tableservice.wsdl_URLColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isxmlns_tnsNull() {
            return this.IsNull(this.tableservice.xmlns_tnsColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setxmlns_tnsNull() {
            this[this.tableservice.xmlns_tnsColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isservice_descriptionNull() {
            return this.IsNull(this.tableservice.service_descriptionColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setservice_descriptionNull() {
            this[this.tableservice.service_descriptionColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isservices_IdNull() {
            return this.IsNull(this.tableservice.services_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setservices_IdNull() {
            this[this.tableservice.services_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public nameRow[] GetnameRows() {
            if ((this.Table.ChildRelations["service_name"] == null)) {
                return new nameRow[0];
            }
            else {
                return ((nameRow[])(base.GetChildRows(this.Table.ChildRelations["service_name"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public methodsRow[] GetmethodsRows() {
            if ((this.Table.ChildRelations["service_methods"] == null)) {
                return new methodsRow[0];
            }
            else {
                return ((methodsRow[])(base.GetChildRows(this.Table.ChildRelations["service_methods"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class nameRow : global::System.Data.DataRow {
        
        private nameDataTable tablename;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal nameRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tablename = ((nameDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string serviceID {
            get {
                try {
                    return ((string)(this[this.tablename.serviceIDColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'serviceID\' in table \'name\' is DBNull.", e);
                }
            }
            set {
                this[this.tablename.serviceIDColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string name_Text {
            get {
                try {
                    return ((string)(this[this.tablename.name_TextColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'name_Text\' in table \'name\' is DBNull.", e);
                }
            }
            set {
                this[this.tablename.name_TextColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int service_Id {
            get {
                try {
                    return ((int)(this[this.tablename.service_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'service_Id\' in table \'name\' is DBNull.", e);
                }
            }
            set {
                this[this.tablename.service_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public serviceRow serviceRow {
            get {
                return ((serviceRow)(this.GetParentRow(this.Table.ParentRelations["service_name"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["service_name"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsserviceIDNull() {
            return this.IsNull(this.tablename.serviceIDColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetserviceIDNull() {
            this[this.tablename.serviceIDColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isname_TextNull() {
            return this.IsNull(this.tablename.name_TextColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setname_TextNull() {
            this[this.tablename.name_TextColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isservice_IdNull() {
            return this.IsNull(this.tablename.service_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setservice_IdNull() {
            this[this.tablename.service_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class methodsRow : global::System.Data.DataRow {
        
        private methodsDataTable tablemethods;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal methodsRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tablemethods = ((methodsDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int methods_Id {
            get {
                return ((int)(this[this.tablemethods.methods_IdColumn]));
            }
            set {
                this[this.tablemethods.methods_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int service_Id {
            get {
                try {
                    return ((int)(this[this.tablemethods.service_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'service_Id\' in table \'methods\' is DBNull.", e);
                }
            }
            set {
                this[this.tablemethods.service_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public serviceRow serviceRow {
            get {
                return ((serviceRow)(this.GetParentRow(this.Table.ParentRelations["service_methods"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["service_methods"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isservice_IdNull() {
            return this.IsNull(this.tablemethods.service_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setservice_IdNull() {
            this[this.tablemethods.service_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public methodRow[] GetmethodRows() {
            if ((this.Table.ChildRelations["methods_method"] == null)) {
                return new methodRow[0];
            }
            else {
                return ((methodRow[])(base.GetChildRows(this.Table.ChildRelations["methods_method"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class methodRow : global::System.Data.DataRow {
        
        private methodDataTable tablemethod;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal methodRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tablemethod = ((methodDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string method_name {
            get {
                try {
                    return ((string)(this[this.tablemethod.method_nameColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'method_name\' in table \'method\' is DBNull.", e);
                }
            }
            set {
                this[this.tablemethod.method_nameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string method_description {
            get {
                try {
                    return ((string)(this[this.tablemethod.method_descriptionColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'method_description\' in table \'method\' is DBNull.", e);
                }
            }
            set {
                this[this.tablemethod.method_descriptionColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int method_Id {
            get {
                return ((int)(this[this.tablemethod.method_IdColumn]));
            }
            set {
                this[this.tablemethod.method_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int methods_Id {
            get {
                try {
                    return ((int)(this[this.tablemethod.methods_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'methods_Id\' in table \'method\' is DBNull.", e);
                }
            }
            set {
                this[this.tablemethod.methods_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public methodsRow methodsRow {
            get {
                return ((methodsRow)(this.GetParentRow(this.Table.ParentRelations["methods_method"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["methods_method"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Ismethod_nameNull() {
            return this.IsNull(this.tablemethod.method_nameColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setmethod_nameNull() {
            this[this.tablemethod.method_nameColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Ismethod_descriptionNull() {
            return this.IsNull(this.tablemethod.method_descriptionColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setmethod_descriptionNull() {
            this[this.tablemethod.method_descriptionColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Ismethods_IdNull() {
            return this.IsNull(this.tablemethod.methods_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setmethods_IdNull() {
            this[this.tablemethod.methods_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public requestRow[] GetrequestRows() {
            if ((this.Table.ChildRelations["method_request"] == null)) {
                return new requestRow[0];
            }
            else {
                return ((requestRow[])(base.GetChildRows(this.Table.ChildRelations["method_request"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public responseRow[] GetresponseRows() {
            if ((this.Table.ChildRelations["method_response"] == null)) {
                return new responseRow[0];
            }
            else {
                return ((responseRow[])(base.GetChildRows(this.Table.ChildRelations["method_response"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class requestRow : global::System.Data.DataRow {
        
        private requestDataTable tablerequest;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal requestRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tablerequest = ((requestDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int request_Id {
            get {
                return ((int)(this[this.tablerequest.request_IdColumn]));
            }
            set {
                this[this.tablerequest.request_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int method_Id {
            get {
                try {
                    return ((int)(this[this.tablerequest.method_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'method_Id\' in table \'request\' is DBNull.", e);
                }
            }
            set {
                this[this.tablerequest.method_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public methodRow methodRow {
            get {
                return ((methodRow)(this.GetParentRow(this.Table.ParentRelations["method_request"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["method_request"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Ismethod_IdNull() {
            return this.IsNull(this.tablerequest.method_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setmethod_IdNull() {
            this[this.tablerequest.method_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public parametersRow[] GetparametersRows() {
            if ((this.Table.ChildRelations["request_parameters"] == null)) {
                return new parametersRow[0];
            }
            else {
                return ((parametersRow[])(base.GetChildRows(this.Table.ChildRelations["request_parameters"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class parametersRow : global::System.Data.DataRow {
        
        private parametersDataTable tableparameters;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal parametersRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableparameters = ((parametersDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int parameters_Id {
            get {
                return ((int)(this[this.tableparameters.parameters_IdColumn]));
            }
            set {
                this[this.tableparameters.parameters_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int request_Id {
            get {
                try {
                    return ((int)(this[this.tableparameters.request_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'request_Id\' in table \'parameters\' is DBNull.", e);
                }
            }
            set {
                this[this.tableparameters.request_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public requestRow requestRow {
            get {
                return ((requestRow)(this.GetParentRow(this.Table.ParentRelations["request_parameters"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["request_parameters"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isrequest_IdNull() {
            return this.IsNull(this.tableparameters.request_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setrequest_IdNull() {
            this[this.tableparameters.request_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public parameterRow[] GetparameterRows() {
            if ((this.Table.ChildRelations["parameters_parameter"] == null)) {
                return new parameterRow[0];
            }
            else {
                return ((parameterRow[])(base.GetChildRows(this.Table.ChildRelations["parameters_parameter"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class parameterRow : global::System.Data.DataRow {
        
        private parameterDataTable tableparameter;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal parameterRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableparameter = ((parameterDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string name {
            get {
                try {
                    return ((string)(this[this.tableparameter.nameColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'name\' in table \'parameter\' is DBNull.", e);
                }
            }
            set {
                this[this.tableparameter.nameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string parameter_description {
            get {
                try {
                    return ((string)(this[this.tableparameter.parameter_descriptionColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'parameter_description\' in table \'parameter\' is DBNull.", e);
                }
            }
            set {
                this[this.tableparameter.parameter_descriptionColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string type {
            get {
                try {
                    return ((string)(this[this.tableparameter.typeColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'type\' in table \'parameter\' is DBNull.", e);
                }
            }
            set {
                this[this.tableparameter.typeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string _default {
            get {
                try {
                    return ((string)(this[this.tableparameter._defaultColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'default\' in table \'parameter\' is DBNull.", e);
                }
            }
            set {
                this[this.tableparameter._defaultColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int parameters_Id {
            get {
                try {
                    return ((int)(this[this.tableparameter.parameters_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'parameters_Id\' in table \'parameter\' is DBNull.", e);
                }
            }
            set {
                this[this.tableparameter.parameters_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public parametersRow parametersRow {
            get {
                return ((parametersRow)(this.GetParentRow(this.Table.ParentRelations["parameters_parameter"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["parameters_parameter"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsnameNull() {
            return this.IsNull(this.tableparameter.nameColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetnameNull() {
            this[this.tableparameter.nameColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isparameter_descriptionNull() {
            return this.IsNull(this.tableparameter.parameter_descriptionColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setparameter_descriptionNull() {
            this[this.tableparameter.parameter_descriptionColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IstypeNull() {
            return this.IsNull(this.tableparameter.typeColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SettypeNull() {
            this[this.tableparameter.typeColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Is_defaultNull() {
            return this.IsNull(this.tableparameter._defaultColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Set_defaultNull() {
            this[this.tableparameter._defaultColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isparameters_IdNull() {
            return this.IsNull(this.tableparameter.parameters_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setparameters_IdNull() {
            this[this.tableparameter.parameters_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class responseRow : global::System.Data.DataRow {
        
        private responseDataTable tableresponse;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal responseRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableresponse = ((responseDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string NumberToDollarsResult {
            get {
                try {
                    return ((string)(this[this.tableresponse.NumberToDollarsResultColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'NumberToDollarsResult\' in table \'response\' is DBNull.", e);
                }
            }
            set {
                this[this.tableresponse.NumberToDollarsResultColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string NumberToWordsResult {
            get {
                try {
                    return ((string)(this[this.tableresponse.NumberToWordsResultColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'NumberToWordsResult\' in table \'response\' is DBNull.", e);
                }
            }
            set {
                this[this.tableresponse.NumberToWordsResultColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string CountryISOCodeResult {
            get {
                try {
                    return ((string)(this[this.tableresponse.CountryISOCodeResultColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'CountryISOCodeResult\' in table \'response\' is DBNull.", e);
                }
            }
            set {
                this[this.tableresponse.CountryISOCodeResultColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string CapitalCityResult {
            get {
                try {
                    return ((string)(this[this.tableresponse.CapitalCityResultColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'CapitalCityResult\' in table \'response\' is DBNull.", e);
                }
            }
            set {
                this[this.tableresponse.CapitalCityResultColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string _string {
            get {
                try {
                    return ((string)(this[this.tableresponse._stringColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'string\' in table \'response\' is DBNull.", e);
                }
            }
            set {
                this[this.tableresponse._stringColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int response_Id {
            get {
                return ((int)(this[this.tableresponse.response_IdColumn]));
            }
            set {
                this[this.tableresponse.response_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int method_Id {
            get {
                try {
                    return ((int)(this[this.tableresponse.method_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'method_Id\' in table \'response\' is DBNull.", e);
                }
            }
            set {
                this[this.tableresponse.method_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public methodRow methodRow {
            get {
                return ((methodRow)(this.GetParentRow(this.Table.ParentRelations["method_response"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["method_response"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsNumberToDollarsResultNull() {
            return this.IsNull(this.tableresponse.NumberToDollarsResultColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetNumberToDollarsResultNull() {
            this[this.tableresponse.NumberToDollarsResultColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsNumberToWordsResultNull() {
            return this.IsNull(this.tableresponse.NumberToWordsResultColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetNumberToWordsResultNull() {
            this[this.tableresponse.NumberToWordsResultColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsCountryISOCodeResultNull() {
            return this.IsNull(this.tableresponse.CountryISOCodeResultColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetCountryISOCodeResultNull() {
            this[this.tableresponse.CountryISOCodeResultColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsCapitalCityResultNull() {
            return this.IsNull(this.tableresponse.CapitalCityResultColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetCapitalCityResultNull() {
            this[this.tableresponse.CapitalCityResultColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Is_stringNull() {
            return this.IsNull(this.tableresponse._stringColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Set_stringNull() {
            this[this.tableresponse._stringColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Ismethod_IdNull() {
            return this.IsNull(this.tableresponse.method_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setmethod_IdNull() {
            this[this.tableresponse.method_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DecipherAllResultRow[] GetDecipherAllResultRows() {
            if ((this.Table.ChildRelations["response_DecipherAllResult"] == null)) {
                return new DecipherAllResultRow[0];
            }
            else {
                return ((DecipherAllResultRow[])(base.GetChildRows(this.Table.ChildRelations["response_DecipherAllResult"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CipherAllResultRow[] GetCipherAllResultRows() {
            if ((this.Table.ChildRelations["response_CipherAllResult"] == null)) {
                return new CipherAllResultRow[0];
            }
            else {
                return ((CipherAllResultRow[])(base.GetChildRows(this.Table.ChildRelations["response_CipherAllResult"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tCurrencyRow[] GettCurrencyRows() {
            if ((this.Table.ChildRelations["response_tCurrency"] == null)) {
                return new tCurrencyRow[0];
            }
            else {
                return ((tCurrencyRow[])(base.GetChildRows(this.Table.ChildRelations["response_tCurrency"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tCountryCodeAndNameRow[] GettCountryCodeAndNameRows() {
            if ((this.Table.ChildRelations["response_tCountryCodeAndName"] == null)) {
                return new tCountryCodeAndNameRow[0];
            }
            else {
                return ((tCountryCodeAndNameRow[])(base.GetChildRows(this.Table.ChildRelations["response_tCountryCodeAndName"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tTeamInfoRow[] GettTeamInfoRows() {
            if ((this.Table.ChildRelations["response_tTeamInfo"] == null)) {
                return new tTeamInfoRow[0];
            }
            else {
                return ((tTeamInfoRow[])(base.GetChildRows(this.Table.ChildRelations["response_tTeamInfo"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StadiumNamesResultRow[] GetStadiumNamesResultRows() {
            if ((this.Table.ChildRelations["response_StadiumNamesResult"] == null)) {
                return new StadiumNamesResultRow[0];
            }
            else {
                return ((StadiumNamesResultRow[])(base.GetChildRows(this.Table.ChildRelations["response_StadiumNamesResult"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tTopSelectedGoalScorerRow[] GettTopSelectedGoalScorerRows() {
            if ((this.Table.ChildRelations["response_tTopSelectedGoalScorer"] == null)) {
                return new tTopSelectedGoalScorerRow[0];
            }
            else {
                return ((tTopSelectedGoalScorerRow[])(base.GetChildRows(this.Table.ChildRelations["response_tTopSelectedGoalScorer"])));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tPlayerNamesRow[] GettPlayerNamesRows() {
            if ((this.Table.ChildRelations["response_tPlayerNames"] == null)) {
                return new tPlayerNamesRow[0];
            }
            else {
                return ((tPlayerNamesRow[])(base.GetChildRows(this.Table.ChildRelations["response_tPlayerNames"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class DecipherAllResultRow : global::System.Data.DataRow {
        
        private DecipherAllResultDataTable tableDecipherAllResult;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal DecipherAllResultRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableDecipherAllResult = ((DecipherAllResultDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int DecipherAllResult_Id {
            get {
                return ((int)(this[this.tableDecipherAllResult.DecipherAllResult_IdColumn]));
            }
            set {
                this[this.tableDecipherAllResult.DecipherAllResult_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int response_Id {
            get {
                try {
                    return ((int)(this[this.tableDecipherAllResult.response_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'response_Id\' in table \'DecipherAllResult\' is DBNull.", e);
                }
            }
            set {
                this[this.tableDecipherAllResult.response_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public responseRow responseRow {
            get {
                return ((responseRow)(this.GetParentRow(this.Table.ParentRelations["response_DecipherAllResult"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["response_DecipherAllResult"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isresponse_IdNull() {
            return this.IsNull(this.tableDecipherAllResult.response_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setresponse_IdNull() {
            this[this.tableDecipherAllResult.response_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public _stringRow[] GetstringRows() {
            if ((this.Table.ChildRelations["DecipherAllResult_string"] == null)) {
                return new _stringRow[0];
            }
            else {
                return ((_stringRow[])(base.GetChildRows(this.Table.ChildRelations["DecipherAllResult_string"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class CipherAllResultRow : global::System.Data.DataRow {
        
        private CipherAllResultDataTable tableCipherAllResult;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal CipherAllResultRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableCipherAllResult = ((CipherAllResultDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int CipherAllResult_Id {
            get {
                return ((int)(this[this.tableCipherAllResult.CipherAllResult_IdColumn]));
            }
            set {
                this[this.tableCipherAllResult.CipherAllResult_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int response_Id {
            get {
                try {
                    return ((int)(this[this.tableCipherAllResult.response_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'response_Id\' in table \'CipherAllResult\' is DBNull.", e);
                }
            }
            set {
                this[this.tableCipherAllResult.response_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public responseRow responseRow {
            get {
                return ((responseRow)(this.GetParentRow(this.Table.ParentRelations["response_CipherAllResult"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["response_CipherAllResult"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isresponse_IdNull() {
            return this.IsNull(this.tableCipherAllResult.response_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setresponse_IdNull() {
            this[this.tableCipherAllResult.response_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public _stringRow[] GetstringRows() {
            if ((this.Table.ChildRelations["CipherAllResult_string"] == null)) {
                return new _stringRow[0];
            }
            else {
                return ((_stringRow[])(base.GetChildRows(this.Table.ChildRelations["CipherAllResult_string"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class tCurrencyRow : global::System.Data.DataRow {
        
        private tCurrencyDataTable tabletCurrency;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal tCurrencyRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tabletCurrency = ((tCurrencyDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string sISOCode {
            get {
                try {
                    return ((string)(this[this.tabletCurrency.sISOCodeColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'sISOCode\' in table \'tCurrency\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletCurrency.sISOCodeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string sName {
            get {
                try {
                    return ((string)(this[this.tabletCurrency.sNameColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'sName\' in table \'tCurrency\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletCurrency.sNameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int response_Id {
            get {
                try {
                    return ((int)(this[this.tabletCurrency.response_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'response_Id\' in table \'tCurrency\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletCurrency.response_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public responseRow responseRow {
            get {
                return ((responseRow)(this.GetParentRow(this.Table.ParentRelations["response_tCurrency"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["response_tCurrency"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IssISOCodeNull() {
            return this.IsNull(this.tabletCurrency.sISOCodeColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetsISOCodeNull() {
            this[this.tabletCurrency.sISOCodeColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IssNameNull() {
            return this.IsNull(this.tabletCurrency.sNameColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetsNameNull() {
            this[this.tabletCurrency.sNameColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isresponse_IdNull() {
            return this.IsNull(this.tabletCurrency.response_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setresponse_IdNull() {
            this[this.tabletCurrency.response_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class tCountryCodeAndNameRow : global::System.Data.DataRow {
        
        private tCountryCodeAndNameDataTable tabletCountryCodeAndName;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal tCountryCodeAndNameRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tabletCountryCodeAndName = ((tCountryCodeAndNameDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string sISOCode {
            get {
                try {
                    return ((string)(this[this.tabletCountryCodeAndName.sISOCodeColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'sISOCode\' in table \'tCountryCodeAndName\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletCountryCodeAndName.sISOCodeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string sName {
            get {
                try {
                    return ((string)(this[this.tabletCountryCodeAndName.sNameColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'sName\' in table \'tCountryCodeAndName\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletCountryCodeAndName.sNameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int response_Id {
            get {
                try {
                    return ((int)(this[this.tabletCountryCodeAndName.response_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'response_Id\' in table \'tCountryCodeAndName\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletCountryCodeAndName.response_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public responseRow responseRow {
            get {
                return ((responseRow)(this.GetParentRow(this.Table.ParentRelations["response_tCountryCodeAndName"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["response_tCountryCodeAndName"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IssISOCodeNull() {
            return this.IsNull(this.tabletCountryCodeAndName.sISOCodeColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetsISOCodeNull() {
            this[this.tabletCountryCodeAndName.sISOCodeColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IssNameNull() {
            return this.IsNull(this.tabletCountryCodeAndName.sNameColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetsNameNull() {
            this[this.tabletCountryCodeAndName.sNameColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isresponse_IdNull() {
            return this.IsNull(this.tabletCountryCodeAndName.response_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setresponse_IdNull() {
            this[this.tabletCountryCodeAndName.response_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class tTeamInfoRow : global::System.Data.DataRow {
        
        private tTeamInfoDataTable tabletTeamInfo;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal tTeamInfoRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tabletTeamInfo = ((tTeamInfoDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string iId {
            get {
                try {
                    return ((string)(this[this.tabletTeamInfo.iIdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'iId\' in table \'tTeamInfo\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletTeamInfo.iIdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string sName {
            get {
                try {
                    return ((string)(this[this.tabletTeamInfo.sNameColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'sName\' in table \'tTeamInfo\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletTeamInfo.sNameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string sCountryFlag {
            get {
                try {
                    return ((string)(this[this.tabletTeamInfo.sCountryFlagColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'sCountryFlag\' in table \'tTeamInfo\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletTeamInfo.sCountryFlagColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string sWikipediaURL {
            get {
                try {
                    return ((string)(this[this.tabletTeamInfo.sWikipediaURLColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'sWikipediaURL\' in table \'tTeamInfo\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletTeamInfo.sWikipediaURLColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string sCountryFlagLarge {
            get {
                try {
                    return ((string)(this[this.tabletTeamInfo.sCountryFlagLargeColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'sCountryFlagLarge\' in table \'tTeamInfo\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletTeamInfo.sCountryFlagLargeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int response_Id {
            get {
                try {
                    return ((int)(this[this.tabletTeamInfo.response_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'response_Id\' in table \'tTeamInfo\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletTeamInfo.response_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public responseRow responseRow {
            get {
                return ((responseRow)(this.GetParentRow(this.Table.ParentRelations["response_tTeamInfo"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["response_tTeamInfo"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsiIdNull() {
            return this.IsNull(this.tabletTeamInfo.iIdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetiIdNull() {
            this[this.tabletTeamInfo.iIdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IssNameNull() {
            return this.IsNull(this.tabletTeamInfo.sNameColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetsNameNull() {
            this[this.tabletTeamInfo.sNameColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IssCountryFlagNull() {
            return this.IsNull(this.tabletTeamInfo.sCountryFlagColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetsCountryFlagNull() {
            this[this.tabletTeamInfo.sCountryFlagColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IssWikipediaURLNull() {
            return this.IsNull(this.tabletTeamInfo.sWikipediaURLColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetsWikipediaURLNull() {
            this[this.tabletTeamInfo.sWikipediaURLColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IssCountryFlagLargeNull() {
            return this.IsNull(this.tabletTeamInfo.sCountryFlagLargeColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetsCountryFlagLargeNull() {
            this[this.tabletTeamInfo.sCountryFlagLargeColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isresponse_IdNull() {
            return this.IsNull(this.tabletTeamInfo.response_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setresponse_IdNull() {
            this[this.tabletTeamInfo.response_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class StadiumNamesResultRow : global::System.Data.DataRow {
        
        private StadiumNamesResultDataTable tableStadiumNamesResult;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal StadiumNamesResultRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableStadiumNamesResult = ((StadiumNamesResultDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int StadiumNamesResult_Id {
            get {
                return ((int)(this[this.tableStadiumNamesResult.StadiumNamesResult_IdColumn]));
            }
            set {
                this[this.tableStadiumNamesResult.StadiumNamesResult_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int response_Id {
            get {
                try {
                    return ((int)(this[this.tableStadiumNamesResult.response_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'response_Id\' in table \'StadiumNamesResult\' is DBNull.", e);
                }
            }
            set {
                this[this.tableStadiumNamesResult.response_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public responseRow responseRow {
            get {
                return ((responseRow)(this.GetParentRow(this.Table.ParentRelations["response_StadiumNamesResult"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["response_StadiumNamesResult"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isresponse_IdNull() {
            return this.IsNull(this.tableStadiumNamesResult.response_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setresponse_IdNull() {
            this[this.tableStadiumNamesResult.response_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public _stringRow[] GetstringRows() {
            if ((this.Table.ChildRelations["StadiumNamesResult_string"] == null)) {
                return new _stringRow[0];
            }
            else {
                return ((_stringRow[])(base.GetChildRows(this.Table.ChildRelations["StadiumNamesResult_string"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class tTopSelectedGoalScorerRow : global::System.Data.DataRow {
        
        private tTopSelectedGoalScorerDataTable tabletTopSelectedGoalScorer;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal tTopSelectedGoalScorerRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tabletTopSelectedGoalScorer = ((tTopSelectedGoalScorerDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string sName {
            get {
                try {
                    return ((string)(this[this.tabletTopSelectedGoalScorer.sNameColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'sName\' in table \'tTopSelectedGoalScorer\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletTopSelectedGoalScorer.sNameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string iSelected {
            get {
                try {
                    return ((string)(this[this.tabletTopSelectedGoalScorer.iSelectedColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'iSelected\' in table \'tTopSelectedGoalScorer\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletTopSelectedGoalScorer.iSelectedColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int tTopSelectedGoalScorer_Id {
            get {
                return ((int)(this[this.tabletTopSelectedGoalScorer.tTopSelectedGoalScorer_IdColumn]));
            }
            set {
                this[this.tabletTopSelectedGoalScorer.tTopSelectedGoalScorer_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int response_Id {
            get {
                try {
                    return ((int)(this[this.tabletTopSelectedGoalScorer.response_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'response_Id\' in table \'tTopSelectedGoalScorer\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletTopSelectedGoalScorer.response_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public responseRow responseRow {
            get {
                return ((responseRow)(this.GetParentRow(this.Table.ParentRelations["response_tTopSelectedGoalScorer"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["response_tTopSelectedGoalScorer"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IssNameNull() {
            return this.IsNull(this.tabletTopSelectedGoalScorer.sNameColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetsNameNull() {
            this[this.tabletTopSelectedGoalScorer.sNameColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsiSelectedNull() {
            return this.IsNull(this.tabletTopSelectedGoalScorer.iSelectedColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetiSelectedNull() {
            this[this.tabletTopSelectedGoalScorer.iSelectedColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isresponse_IdNull() {
            return this.IsNull(this.tabletTopSelectedGoalScorer.response_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setresponse_IdNull() {
            this[this.tabletTopSelectedGoalScorer.response_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CountriesRow[] GetCountriesRows() {
            if ((this.Table.ChildRelations["tTopSelectedGoalScorer_Countries"] == null)) {
                return new CountriesRow[0];
            }
            else {
                return ((CountriesRow[])(base.GetChildRows(this.Table.ChildRelations["tTopSelectedGoalScorer_Countries"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class CountriesRow : global::System.Data.DataRow {
        
        private CountriesDataTable tableCountries;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal CountriesRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tableCountries = ((CountriesDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int Countries_Id {
            get {
                return ((int)(this[this.tableCountries.Countries_IdColumn]));
            }
            set {
                this[this.tableCountries.Countries_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int tTopSelectedGoalScorer_Id {
            get {
                try {
                    return ((int)(this[this.tableCountries.tTopSelectedGoalScorer_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'tTopSelectedGoalScorer_Id\' in table \'Countries\' is DBNull.", e);
                }
            }
            set {
                this[this.tableCountries.tTopSelectedGoalScorer_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tTopSelectedGoalScorerRow tTopSelectedGoalScorerRow {
            get {
                return ((tTopSelectedGoalScorerRow)(this.GetParentRow(this.Table.ParentRelations["tTopSelectedGoalScorer_Countries"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["tTopSelectedGoalScorer_Countries"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IstTopSelectedGoalScorer_IdNull() {
            return this.IsNull(this.tableCountries.tTopSelectedGoalScorer_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SettTopSelectedGoalScorer_IdNull() {
            this[this.tableCountries.tTopSelectedGoalScorer_IdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tCountrySelectedTopScorerRow[] GettCountrySelectedTopScorerRows() {
            if ((this.Table.ChildRelations["Countries_tCountrySelectedTopScorer"] == null)) {
                return new tCountrySelectedTopScorerRow[0];
            }
            else {
                return ((tCountrySelectedTopScorerRow[])(base.GetChildRows(this.Table.ChildRelations["Countries_tCountrySelectedTopScorer"])));
            }
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class tCountrySelectedTopScorerRow : global::System.Data.DataRow {
        
        private tCountrySelectedTopScorerDataTable tabletCountrySelectedTopScorer;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal tCountrySelectedTopScorerRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tabletCountrySelectedTopScorer = ((tCountrySelectedTopScorerDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string sName {
            get {
                try {
                    return ((string)(this[this.tabletCountrySelectedTopScorer.sNameColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'sName\' in table \'tCountrySelectedTopScorer\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletCountrySelectedTopScorer.sNameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string iCount {
            get {
                try {
                    return ((string)(this[this.tabletCountrySelectedTopScorer.iCountColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'iCount\' in table \'tCountrySelectedTopScorer\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletCountrySelectedTopScorer.iCountColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int Countries_Id {
            get {
                try {
                    return ((int)(this[this.tabletCountrySelectedTopScorer.Countries_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'Countries_Id\' in table \'tCountrySelectedTopScorer\' is DBNul" +
                            "l.", e);
                }
            }
            set {
                this[this.tabletCountrySelectedTopScorer.Countries_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CountriesRow CountriesRow {
            get {
                return ((CountriesRow)(this.GetParentRow(this.Table.ParentRelations["Countries_tCountrySelectedTopScorer"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["Countries_tCountrySelectedTopScorer"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IssNameNull() {
            return this.IsNull(this.tabletCountrySelectedTopScorer.sNameColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetsNameNull() {
            this[this.tabletCountrySelectedTopScorer.sNameColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsiCountNull() {
            return this.IsNull(this.tabletCountrySelectedTopScorer.iCountColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetiCountNull() {
            this[this.tabletCountrySelectedTopScorer.iCountColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsCountries_IdNull() {
            return this.IsNull(this.tabletCountrySelectedTopScorer.Countries_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetCountries_IdNull() {
            this[this.tabletCountrySelectedTopScorer.Countries_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Represents strongly named DataRow class.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public partial class tPlayerNamesRow : global::System.Data.DataRow {
        
        private tPlayerNamesDataTable tabletPlayerNames;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal tPlayerNamesRow(global::System.Data.DataRowBuilder rb) : 
                base(rb) {
            this.tabletPlayerNames = ((tPlayerNamesDataTable)(this.Table));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string iId {
            get {
                try {
                    return ((string)(this[this.tabletPlayerNames.iIdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'iId\' in table \'tPlayerNames\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletPlayerNames.iIdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string sName {
            get {
                try {
                    return ((string)(this[this.tabletPlayerNames.sNameColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'sName\' in table \'tPlayerNames\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletPlayerNames.sNameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string sCountryName {
            get {
                try {
                    return ((string)(this[this.tabletPlayerNames.sCountryNameColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'sCountryName\' in table \'tPlayerNames\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletPlayerNames.sCountryNameColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string sCountryFlag {
            get {
                try {
                    return ((string)(this[this.tabletPlayerNames.sCountryFlagColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'sCountryFlag\' in table \'tPlayerNames\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletPlayerNames.sCountryFlagColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string sCountryFlagLarge {
            get {
                try {
                    return ((string)(this[this.tabletPlayerNames.sCountryFlagLargeColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'sCountryFlagLarge\' in table \'tPlayerNames\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletPlayerNames.sCountryFlagLargeColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public int response_Id {
            get {
                try {
                    return ((int)(this[this.tabletPlayerNames.response_IdColumn]));
                }
                catch (global::System.InvalidCastException e) {
                    throw new global::System.Data.StrongTypingException("The value for column \'response_Id\' in table \'tPlayerNames\' is DBNull.", e);
                }
            }
            set {
                this[this.tabletPlayerNames.response_IdColumn] = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public responseRow responseRow {
            get {
                return ((responseRow)(this.GetParentRow(this.Table.ParentRelations["response_tPlayerNames"])));
            }
            set {
                this.SetParentRow(value, this.Table.ParentRelations["response_tPlayerNames"]);
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IsiIdNull() {
            return this.IsNull(this.tabletPlayerNames.iIdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetiIdNull() {
            this[this.tabletPlayerNames.iIdColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IssNameNull() {
            return this.IsNull(this.tabletPlayerNames.sNameColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetsNameNull() {
            this[this.tabletPlayerNames.sNameColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IssCountryNameNull() {
            return this.IsNull(this.tabletPlayerNames.sCountryNameColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetsCountryNameNull() {
            this[this.tabletPlayerNames.sCountryNameColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IssCountryFlagNull() {
            return this.IsNull(this.tabletPlayerNames.sCountryFlagColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetsCountryFlagNull() {
            this[this.tabletPlayerNames.sCountryFlagColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool IssCountryFlagLargeNull() {
            return this.IsNull(this.tabletPlayerNames.sCountryFlagLargeColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void SetsCountryFlagLargeNull() {
            this[this.tabletPlayerNames.sCountryFlagLargeColumn] = global::System.Convert.DBNull;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool Isresponse_IdNull() {
            return this.IsNull(this.tabletPlayerNames.response_IdColumn);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Setresponse_IdNull() {
            this[this.tabletPlayerNames.response_IdColumn] = global::System.Convert.DBNull;
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class _stringRowChangeEvent : global::System.EventArgs {
        
        private _stringRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public _stringRowChangeEvent(_stringRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public _stringRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class servicesRowChangeEvent : global::System.EventArgs {
        
        private servicesRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public servicesRowChangeEvent(servicesRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public servicesRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class serviceRowChangeEvent : global::System.EventArgs {
        
        private serviceRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public serviceRowChangeEvent(serviceRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public serviceRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class nameRowChangeEvent : global::System.EventArgs {
        
        private nameRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public nameRowChangeEvent(nameRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public nameRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class methodsRowChangeEvent : global::System.EventArgs {
        
        private methodsRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public methodsRowChangeEvent(methodsRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public methodsRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class methodRowChangeEvent : global::System.EventArgs {
        
        private methodRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public methodRowChangeEvent(methodRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public methodRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class requestRowChangeEvent : global::System.EventArgs {
        
        private requestRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public requestRowChangeEvent(requestRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public requestRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class parametersRowChangeEvent : global::System.EventArgs {
        
        private parametersRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public parametersRowChangeEvent(parametersRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public parametersRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class parameterRowChangeEvent : global::System.EventArgs {
        
        private parameterRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public parameterRowChangeEvent(parameterRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public parameterRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class responseRowChangeEvent : global::System.EventArgs {
        
        private responseRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public responseRowChangeEvent(responseRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public responseRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class DecipherAllResultRowChangeEvent : global::System.EventArgs {
        
        private DecipherAllResultRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DecipherAllResultRowChangeEvent(DecipherAllResultRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DecipherAllResultRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class CipherAllResultRowChangeEvent : global::System.EventArgs {
        
        private CipherAllResultRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CipherAllResultRowChangeEvent(CipherAllResultRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CipherAllResultRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class tCurrencyRowChangeEvent : global::System.EventArgs {
        
        private tCurrencyRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tCurrencyRowChangeEvent(tCurrencyRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tCurrencyRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class tCountryCodeAndNameRowChangeEvent : global::System.EventArgs {
        
        private tCountryCodeAndNameRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tCountryCodeAndNameRowChangeEvent(tCountryCodeAndNameRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tCountryCodeAndNameRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class tTeamInfoRowChangeEvent : global::System.EventArgs {
        
        private tTeamInfoRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tTeamInfoRowChangeEvent(tTeamInfoRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tTeamInfoRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class StadiumNamesResultRowChangeEvent : global::System.EventArgs {
        
        private StadiumNamesResultRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StadiumNamesResultRowChangeEvent(StadiumNamesResultRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StadiumNamesResultRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class tTopSelectedGoalScorerRowChangeEvent : global::System.EventArgs {
        
        private tTopSelectedGoalScorerRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tTopSelectedGoalScorerRowChangeEvent(tTopSelectedGoalScorerRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tTopSelectedGoalScorerRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class CountriesRowChangeEvent : global::System.EventArgs {
        
        private CountriesRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CountriesRowChangeEvent(CountriesRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CountriesRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class tCountrySelectedTopScorerRowChangeEvent : global::System.EventArgs {
        
        private tCountrySelectedTopScorerRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tCountrySelectedTopScorerRowChangeEvent(tCountrySelectedTopScorerRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tCountrySelectedTopScorerRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
    
    /// <summary>
    ///Row event argument class
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    public class tPlayerNamesRowChangeEvent : global::System.EventArgs {
        
        private tPlayerNamesRow eventRow;
        
        private global::System.Data.DataRowAction eventAction;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tPlayerNamesRowChangeEvent(tPlayerNamesRow row, global::System.Data.DataRowAction action) {
            this.eventRow = row;
            this.eventAction = action;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public tPlayerNamesRow Row {
            get {
                return this.eventRow;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.DataRowAction Action {
            get {
                return this.eventAction;
            }
        }
    }
}
